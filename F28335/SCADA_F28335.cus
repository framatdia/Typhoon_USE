<ui_settings>
    <version>2.8</version>
    <model_locked>False</model_locked>
    <canvas_bg_color>#ffffff</canvas_bg_color>
    <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts.
# NOTE: This code is always executed prior simulation start.

# Variable 'SETTINGS_DIR' holds directory where loaded Panel .cus file is located.
# Also you can call 'get_settings_dir_path()' function in any
# Macro and Expression scripts to get the same directory.
# load HIL Control Panel settings file
# hil.load_model(file=r"C:\Users\jtrujillo\Desktop\matiydani\settings.runx")
# hil.load_settings_file(file=r"C:\Users\jtrujillo\Desktop\matiydani\settings.runx")

# HIL API is imported as 'hil'
# Numpy module is imported as 'np'
# Scipy module is imported as 'sp'
# Schematic Editor model namespace is imported as 'scm'
# Function for printing to HIL SCADA Message log is imported as 'printf'.

SETTINGS_DIR = get_settings_dir_path()

global boton
boton=0

global boton1
boton1=0

global boton3
boton3=0

global boton4
boton4=0

hil.set_scada_input_value('startFSM', 0)
hil.set_scada_input_value('startAC', 0)

hil.set_scada_input_value('Control', 0)
hil.set_scada_input_value('hilos', 3)
hil.set_scada_input_value('interruptor_red', 1)

hil.set_scada_input_value('K_i_p', 0)
hil.set_scada_input_value('K_i_i', 0)
hil.set_scada_input_value('Kp_dc', 0)
hil.set_scada_input_value('Ki_dc', 0)

hil.set_scada_input_value('V_h_ref', 0)
hil.set_scada_input_value('i_d_ref', 0)
hil.set_scada_input_value('P_pu_ref', 0)
hil.set_scada_input_value('Q_pu_ref', 0)
hil.set_scada_input_value('i_d_ref', 0)
hil.set_scada_input_value('i_q_ref', 0)

]]></initialization_code>
    <components>
        <component_data>
                <id>fb907110097111f09f4c4ccc6a8f7014</id>
                <name><![CDATA[Text note]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">               <span style=" font-size:50pt; font-weight:600;">SUNRISE SUMMER SCHOOL</span></p></body></html>]]></text>
                <widget_settings>
                    <x>856</x>
                    <y>1200</y>
                    <width>1032</width>
                    <height>192</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f8113fd6097111f0ab6e4ccc6a8f7014</id>
                <name><![CDATA[Image4]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[Imagen\Curso.PNG]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <widget_settings>
                    <x>1024</x>
                    <y>704</y>
                    <width>640</width>
                    <height>488</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>False</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>0097f8f9057711f09bad4ccc6a8f7014</id>
                <name><![CDATA[marco2]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>3000</x>
                    <y>3000</y>
                    <width>2736</width>
                    <height>864</height>
                    <background_color><![CDATA[#ffffff]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>8368c832057811f092b84ccc6a8f7014</id>
                <name><![CDATA[marco3]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>3000</x>
                    <y>3000</y>
                    <width>1136</width>
                    <height>512</height>
                    <background_color><![CDATA[#f3f3f3]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>510b7d7f03e811f09c9e4ccc6a8f7014</id>
                <name><![CDATA[Image1]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[Imagen\power_controller.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>1112</width>
                    <height>384</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>False</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>64f99d89032a11f0ba5f4ccc6a8f7014</id>
                <name><![CDATA[Tension bus ]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>144</width>
                    <height>64</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>89e3741303e811f092284ccc6a8f7014</id>
                <name><![CDATA[Image2]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[Imagen\STATCOM.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>1104</width>
                    <height>392</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>False</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>8e1ca0cf03df11f093c34ccc6a8f7014</id>
                <name><![CDATA[Image]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[Imagen\current_controller.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>1104</width>
                    <height>368</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>False</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a5f65500056c11f0ae244ccc6a8f7014</id>
                <name><![CDATA[Ia]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[iarms]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a5f65501056c11f08d474ccc6a8f7014</id>
                <name><![CDATA[Intensidades]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>432</width>
                    <height>56</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>307d4de403e111f08b184ccc6a8f7014</id>
                <name><![CDATA[Text note4]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>384</x>
                    <y>16</y>
                    <width>656</width>
                    <height>136</height>
                    <background_color><![CDATA[#e9eaed]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>88ef87e403de11f0a6c04ccc6a8f7014</id>
                <name><![CDATA[Text note17]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>24</x>
                    <y>16</y>
                    <width>2736</width>
                    <height>560</height>
                    <background_color><![CDATA[#ffffff]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>5e503666032a11f09cce4ccc6a8f7014</id>
                <name><![CDATA[Potencias]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>144</width>
                    <height>128</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>61bb729b032a11f091944ccc6a8f7014</id>
                <name><![CDATA[red]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>3000</x>
                    <y>3000</y>
                    <width>312</width>
                    <height>120</height>
                    <background_color><![CDATA[#bcbcbc]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>64f99d88032a11f085d44ccc6a8f7014</id>
                <name><![CDATA[Vh]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[V_h]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a0825706032811f0ade64ccc6a8f7014</id>
                <name><![CDATA[marco1]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>3000</x>
                    <y>3000</y>
                    <width>656</width>
                    <height>184</height>
                    <background_color><![CDATA[#ffffff]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>84c3f6f0031a11f0a59f4ccc6a8f7014</id>
                <name><![CDATA[Text note1]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>16</x>
                    <y>16</y>
                    <width>616</width>
                    <height>96</height>
                    <background_color><![CDATA[#e9eaed]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>07d8e63b031811f09ba14ccc6a8f7014</id>
                <name><![CDATA[Text note14]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>232</x>
                    <y>56</y>
                    <width>168</width>
                    <height>112</height>
                    <background_color><![CDATA[#e9eaed]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>07d8e63d031811f0ba4e4ccc6a8f7014</id>
                <name><![CDATA[Text note15]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>40</x>
                    <y>8</y>
                    <width>176</width>
                    <height>216</height>
                    <background_color><![CDATA[#e9eaed]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>94e6a899ffe311ef90594ccc6a8f7014</id>
                <name><![CDATA[Group1]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['fb907110097111f09f4c4ccc6a8f7014', 'f8113fd6097111f0ab6e4ccc6a8f7014', '0097f8f9057711f09bad4ccc6a8f7014', '8368c832057811f092b84ccc6a8f7014', '510b7d7f03e811f09c9e4ccc6a8f7014', '89e3741303e811f092284ccc6a8f7014', '8e1ca0cf03df11f093c34ccc6a8f7014', 'a5f65501056c11f08d474ccc6a8f7014', 'a5f65500056c11f0ae244ccc6a8f7014', '88ef87e403de11f0a6c04ccc6a8f7014', '5e503666032a11f09cce4ccc6a8f7014', '61bb729b032a11f091944ccc6a8f7014', '64f99d89032a11f0ba5f4ccc6a8f7014', '64f99d88032a11f085d44ccc6a8f7014', 'a0825706032811f0ade64ccc6a8f7014', 'f43dc9bd031711f0940f4ccc6a8f7014', '4cdb4b41031a11f0bc584ccc6a8f7014', '7a05b9b2031a11f0ac214ccc6a8f7014', 'd44e425c031b11f0adba4ccc6a8f7014', 'b51cf833031e11f090684ccc6a8f7014', 'a889b206031f11f0a1ed4ccc6a8f7014', 'ebeb873a032411f0a7f24ccc6a8f7014', '5e503663032a11f0b52d4ccc6a8f7014', '5e503664032a11f0b3ae4ccc6a8f7014', '61bb7299032a11f098fd4ccc6a8f7014', 'cf07bc2403e811f09f984ccc6a8f7014', 'cd3b4b3c03f011f081634ccc6a8f7014', '09ddc12803f111f0b2ff4ccc6a8f7014', '0d700ec203f111f085744ccc6a8f7014', '1553e41f03f111f0a80f4ccc6a8f7014', '18a3987903f111f095244ccc6a8f7014', '5e501190032a11f080324ccc6a8f7014', '6725777a056c11f088794ccc6a8f7014', '5e503667032a11f08eba4ccc6a8f7014', '5e503661032a11f0bebb4ccc6a8f7014', 'a5f65502056c11f08afd4ccc6a8f7014', 'a5f65503056c11f0bb6b4ccc6a8f7014', '61bb4b8e032a11f0a9f14ccc6a8f7014', '61bb729a032a11f0b99b4ccc6a8f7014']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be available for use in
# all Macro, Expression and handlers codes of components owned by this widget.
# This code is always executed prior simulation start. In case this is a
# Library Widget, this code is also executed on drag and drop, Panel load
# and widget paste.
#
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
control = hil.read_analog_signal(name = "ctrl");
hil.set_scada_input_value('Control', 0)


SCOPE= panel.get_widget_by_fqn("Capture/Scope", parent=WIDGET_HANDLE)
GUARDAR= panel.get_widget_by_fqn("Signal data logger", parent=WIDGET_HANDLE)
FRECUENCIA= panel.get_widget_by_fqn("PLL frequency", parent=WIDGET_HANDLE)
PARAMETROS= panel.get_widget_by_fqn("SETPOINTS AND PARAMETERS", parent=WIDGET_HANDLE)

image= panel.get_widget_by_fqn("Image", parent=WIDGET_HANDLE)
image1= panel.get_widget_by_fqn("Image1", parent=WIDGET_HANDLE)
image2= panel.get_widget_by_fqn("Image2", parent=WIDGET_HANDLE)

# CORRIENTES
grafica1= panel.get_widget_by_fqn("INTENSIDAD (Id)", parent=WIDGET_HANDLE)
grafica2= panel.get_widget_by_fqn("INTENSIDAD (Iq)", parent=WIDGET_HANDLE)
# POTENCIAS
grafica3= panel.get_widget_by_fqn("POTENCIA ACTIVA", parent=WIDGET_HANDLE)
grafica4= panel.get_widget_by_fqn("POTENCIA REACTIVA", parent=WIDGET_HANDLE)
# STATCOM
grafica5= panel.get_widget_by_fqn("TENSIÓN BUS DE CONTINUA", parent=WIDGET_HANDLE)

# DISPLAYS
Intensidades= panel.get_widget_by_fqn("Intensidades", parent=WIDGET_HANDLE)
Ia= panel.get_widget_by_fqn("Ia", parent=WIDGET_HANDLE)
Ib= panel.get_widget_by_fqn("Ib", parent=WIDGET_HANDLE)
Ic= panel.get_widget_by_fqn("Ic", parent=WIDGET_HANDLE)

tensiones= panel.get_widget_by_fqn("tensiones", parent=WIDGET_HANDLE)
Va= panel.get_widget_by_fqn("Va", parent=WIDGET_HANDLE)
Vb= panel.get_widget_by_fqn("Vb", parent=WIDGET_HANDLE)
Vc= panel.get_widget_by_fqn("Vc", parent=WIDGET_HANDLE)

Potencias= panel.get_widget_by_fqn("Potencias", parent=WIDGET_HANDLE)
P3f= panel.get_widget_by_fqn("P3f", parent=WIDGET_HANDLE)
Q3f= panel.get_widget_by_fqn("Q3f", parent=WIDGET_HANDLE)

Vbus= panel.get_widget_by_fqn("Tension bus ", parent=WIDGET_HANDLE)
Vh= panel.get_widget_by_fqn("Vh", parent=WIDGET_HANDLE)

# otras cosas
marco1= panel.get_widget_by_fqn("marco1", parent=WIDGET_HANDLE)
marco2= panel.get_widget_by_fqn("marco2", parent=WIDGET_HANDLE)
marco3= panel.get_widget_by_fqn("marco3", parent=WIDGET_HANDLE)

RED= panel.get_widget_by_fqn("GRID", parent=WIDGET_HANDLE)
red= panel.get_widget_by_fqn("red", parent=WIDGET_HANDLE)
red_info= panel.get_widget_by_fqn("red_info", parent=WIDGET_HANDLE)
display_red= panel.get_widget_by_fqn("-", parent=WIDGET_HANDLE)






def aparecer1(scope, guardar, frecuencia, parametros):
    panel.set_property_value(scope, "position", [1200, 30])
    panel.set_property_value(guardar, "position", [950, 350])
    panel.set_property_value(frecuencia, "position", [600, 350])
    panel.set_property_value(parametros, "position", [72, 728])

def desaparecer1(scope, guardar,frecuencia, parametros):
    panel.set_property_value(scope, "position", [6000, 3000])
    panel.set_property_value(guardar, "position", [6000, 3000])
    panel.set_property_value(frecuencia, "position", [6000, 3000])
    panel.set_property_value(parametros, "position", [6000, 3000])

# Esquema y gráficas correrespondientes
def aparecer2(i1,g1,g2):
    panel.set_property_value(i1, "position", [1424, 608])
    panel.set_property_value(g1, "position", [1280, 1024])
    panel.set_property_value(g2, "position", [1992, 1024])
    # Las gráficas correspondientes
def desaparecer2(i1,i2,g1,g2,g3):
    panel.set_property_value(i1, "position", [6000, 3000])
    panel.set_property_value(i2, "position", [6000, 3000])
    panel.set_property_value(g1, "position", [6000, 3000])
    panel.set_property_value(g2, "position", [6000, 3000])
    panel.set_property_value(g3, "position", [6000, 3000])
# Los displays
def display_corriente_0(c0, d1,c1,d2,d3,d4,c2,d5,d6,d7,c3,d8,d9):
        panel.set_property_value(c0, "position", [6000, 3000])
        panel.set_property_value(d1, "position", [6000, 3000])
        panel.set_property_value(c1, "position", [6000, 3000])
        panel.set_property_value(d2, "position", [6000, 3000])
        panel.set_property_value(d3, "position", [6000, 3000])
        panel.set_property_value(d4, "position", [6000, 3000])
        panel.set_property_value(c2, "position", [6000, 3000])
        panel.set_property_value(d5, "position", [6000, 3000])
        panel.set_property_value(d6, "position", [6000, 3000])
        panel.set_property_value(d7, "position", [6000, 3000])
        panel.set_property_value(c3, "position", [6000, 3000])
        panel.set_property_value(d8, "position", [6000, 3000])
        panel.set_property_value(d9, "position", [6000, 3000])
def display_corriente_2(c0, d1,c1,d2,d3,d4,c2,d5,d6,d7,c3,d8,d9):
        panel.set_property_value(c0, "position", [1664, 704])
        panel.set_property_value(d1, "position", [1664, 704])
        panel.set_property_value(c1, "position", [2000, 712])
        panel.set_property_value(d2, "position", [2000, 712])
        panel.set_property_value(d3, "position", [2144, 712])
        panel.set_property_value(d4, "position", [2288, 712])
        panel.set_property_value(c2, "position", [2000, 952])
        panel.set_property_value(d5, "position", [2000, 952])
        panel.set_property_value(d6, "position", [2144, 952])
        panel.set_property_value(d7, "position", [2288, 952])
        panel.set_property_value(c3, "position", [2560, 792])
        panel.set_property_value(d8, "position", [2560, 800])
        panel.set_property_value(d9, "position", [2560, 864])
def display_corriente_11(c0, d1,c1,d2,d3,d4,c2,d5,d6,d7,c3,d8,d9):
        panel.set_property_value(c0, "position", [1432, 704])
        panel.set_property_value(d1, "position", [1432, 704])
        panel.set_property_value(c1, "position", [1928, 712])
        panel.set_property_value(d2, "position", [1928, 712])
        panel.set_property_value(d3, "position", [2072, 712])
        panel.set_property_value(d4, "position", [2216, 712])
        panel.set_property_value(c2, "position", [1936, 952])
        panel.set_property_value(d5, "position", [1936, 952])
        panel.set_property_value(d6, "position", [2080, 952])
        panel.set_property_value(d7, "position", [2224, 952])
        panel.set_property_value(c3, "position", [2560, 792])
        panel.set_property_value(d8, "position", [2560, 800])
        panel.set_property_value(d9, "position", [2560, 864])

def aparecer_otros(c1,c2,c3,r1,r2,r3,r4):
        panel.set_property_value(c1, "position", [512, 328])
        panel.set_property_value(c2, "position", [24, 591])
        panel.set_property_value(c3, "position", [48, 712])
        panel.set_property_value(r1, "position", [504, 1088])
        panel.set_property_value(r2, "position", [512, 1136])
        panel.set_property_value(r3, "position", [640, 1096])
        panel.set_property_value(r4, "position", [480, 1080])

def desaparecer_otros(c1,c2,c3,r1,r2,r3,r4):
        panel.set_property_value(c1, "position", [3000, 3000])
        panel.set_property_value(c2, "position", [3000, 3000])
        panel.set_property_value(c3, "position", [3000, 3000])
        panel.set_property_value(r1, "position", [3000, 3000])
        panel.set_property_value(r2, "position", [3000, 3000])
        panel.set_property_value(r3, "position", [3000, 3000])
        panel.set_property_value(r4, "position", [3000, 3000])]]></initialization_code>
                <library_widget_help><![CDATA[None]]></library_widget_help>
                <widget_settings>
                    <x>1896</x>
                    <y>856</y>
                    <width>2800</width>
                    <height>1520</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>f43dc9bd031711f0940f4ccc6a8f7014</id>
                <name><![CDATA[SETTINGS]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['07d8e63d031811f0ba4e4ccc6a8f7014', '07d8e63b031811f09ba14ccc6a8f7014', '07d8e639031811f0bba54ccc6a8f7014', '07d90d67031811f0ac064ccc6a8f7014', '07d8e63a031811f08b5d4ccc6a8f7014', '07d90d66031811f0bb1d4ccc6a8f7014', '07d90d68031811f081d24ccc6a8f7014', '07d8e63c031811f0b14c4ccc6a8f7014', '07d90d65031811f0addf4ccc6a8f7014']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be available for use in
# all Macro, Expression and handlers codes of components owned by this widget.
# This code is always executed prior simulation start. In case this is a
# Library Widget, this code is also executed on drag and drop, Panel load
# and widget paste.
#
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></initialization_code>
                <library_widget_help><![CDATA[None]]></library_widget_help>
                <widget_settings>
                    <x>56</x>
                    <y>24</y>
                    <width>448</width>
                    <height>280</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>07d90d67031811f0ac064ccc6a8f7014</id>
                <name><![CDATA[_2]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
if hil.read_analog_signal(name='start_ac') == 0:
    displayValue = False
    
else:
    displayValue = True
    

]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>320</x>
                    <y>120</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>07d8e639031811f0bba54ccc6a8f7014</id>
                <name><![CDATA[_3]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
if hil.read_analog_signal(name='start_fsm') == 0:
    displayValue = False
    
else:
    displayValue = True
    

]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>320</x>
                    <y>72</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>07d90d68031811f081d24ccc6a8f7014</id>
                <name><![CDATA[Fault_type]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Fault_type]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>56</x>
                    <y>152</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>True</color_range>
                    <green_range>(150.0, 170.0, 100.0, 120.0)</green_range>
                    <orange_range>(120.0, 140.0, 140.0, 150.0)</orange_range>
                    <red_range>(2.0, 9.0, 9.0, 12.0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>07d90d66031811f0bb1d4ccc6a8f7014</id>
                <name><![CDATA[CAN2Status]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[CAN2Status]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>56</x>
                    <y>88</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>True</color_range>
                    <green_range>(1.0, 3.0, 16.0, 17.0)</green_range>
                    <orange_range>(18.0, 19.0, 20.0, 21.0)</orange_range>
                    <red_range>(3.0, 9.0, 9.0, 15.0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>07d8e63a031811f08b5d4ccc6a8f7014</id>
                <name><![CDATA[CAN1Status]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[CAN1Status]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>56</x>
                    <y>24</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>True</color_range>
                    <green_range>(16.0, 20.0, 15.0, 8.0)</green_range>
                    <orange_range>(13.0, 14.0, 15.0, 16.0)</orange_range>
                    <red_range>(1.0, 9.0, 9.0, 11.0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>07d8e63c031811f0b14c4ccc6a8f7014</id>
                <name><![CDATA[FSM]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
#
#global start_FSM
#hil.read_analog_signal(name = "startFSM")


if boton==0:
   hil.set_scada_input_value('startFSM', 1)
   boton=1
elif boton==1:
   hil.set_scada_input_value('startFSM', 0)
   boton=0
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

widgetValue = 0]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>264</x>
                    <y>72</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>07d90d65031811f0addf4ccc6a8f7014</id>
                <name><![CDATA[AC]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
#
#global start_FSM
#hil.read_analog_signal(name = "startFSM")


if boton1==0:
   hil.set_scada_input_value('startAC', 1)
   boton1=1
elif boton1==1:
   hil.set_scada_input_value('startAC', 0)
   boton1=0
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

widgetValue = None]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>264</x>
                    <y>120</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4cdb4b41031a11f0bc584ccc6a8f7014</id>
                <name><![CDATA[CONTROL]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['84c3f6f0031a11f0a59f4ccc6a8f7014', '84c3f6f1031a11f095fc4ccc6a8f7014', '97b83c0e031a11f0adb64ccc6a8f7014', '84c3f6ef031a11f0b8894ccc6a8f7014']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be available for use in
# all Macro, Expression and handlers codes of components owned by this widget.
# This code is always executed prior simulation start. In case this is a
# Library Widget, this code is also executed on drag and drop, Panel load
# and widget paste.
#
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></initialization_code>
                <library_widget_help><![CDATA[None]]></library_widget_help>
                <widget_settings>
                    <x>512</x>
                    <y>24</y>
                    <width>664</width>
                    <height>280</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>7a05b9b2031a11f0ac214ccc6a8f7014</id>
                <name><![CDATA[SETPOINTS AND PARAMETERS]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['307d4de403e111f08b184ccc6a8f7014', '7a05b9b4031a11f095914ccc6a8f7014', '7a05b9b6031a11f0a10b4ccc6a8f7014', '7a05b9b7031a11f0bc7f4ccc6a8f7014', '7a05b9b8031a11f0a1564ccc6a8f7014', '7a05e0df031a11f0aee14ccc6a8f7014', '7a05e0e0031a11f0a98a4ccc6a8f7014', '7a05e0e1031a11f08ece4ccc6a8f7014', '7a05e0e6031a11f0a62a4ccc6a8f7014', '7a060826031a11f08e734ccc6a8f7014', '1ac37d51031c11f0aa964ccc6a8f7014', '995883e203e311f08d2b4ccc6a8f7014', 'b5d4f63b03e311f09f444ccc6a8f7014']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be available for use in
# all Macro, Expression and handlers codes of components owned by this widget.
# This code is always executed prior simulation start. In case this is a
# Library Widget, this code is also executed on drag and drop, Panel load
# and widget paste.
#
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

Idref = panel.get_widget_by_fqn("i_d_ref", parent=WIDGET_HANDLE)
Iqref= panel.get_widget_by_fqn("i_q_ref", parent=WIDGET_HANDLE)

Ppuref = panel.get_widget_by_fqn("P_pu_ref", parent=WIDGET_HANDLE)
Qpuref= panel.get_widget_by_fqn("Q_pu_ref", parent=WIDGET_HANDLE)

ganancias2 = panel.get_widget_by_fqn("GANANCIAS2", parent=WIDGET_HANDLE)
ganancias3 = panel.get_widget_by_fqn("GANANCIAS3", parent=WIDGET_HANDLE)
ganancias11 = panel.get_widget_by_fqn("GANANCIAS11", parent=WIDGET_HANDLE)



Vhref= panel.get_widget_by_fqn("V_h_ref", parent=WIDGET_HANDLE)



def aparecer(w1, w2, gan):
    panel.set_property_value(w1, "position", [110, 80])
    panel.set_property_value(w2, "position", [110, 160])
    panel.set_property_value(gan, "position", [384, 160])

def desaparecer(w1, w2, w3, gan1, gan2):
    panel.set_property_value(w1, "position", [26, 400])
    panel.set_property_value(w2, "position", [26, 400])
    panel.set_property_value(w3, "position", [26, 400])
    panel.set_property_value(gan1, "position", [26, 400])
    panel.set_property_value(gan2, "position", [26, 400])

]]></initialization_code>
                <library_widget_help><![CDATA[None]]></library_widget_help>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>1080</width>
                    <height>312</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>7a05b9b4031a11f095914ccc6a8f7014</id>
                <name><![CDATA[Text note3]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><meta charset="utf-8" /><style type="text/css">
p, li { white-space: pre-wrap; }
hr { height: 1px; border-width: 0; }
li.unchecked::marker { content: "\2610"; }
li.checked::marker { content: "\2612"; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>40</x>
                    <y>16</y>
                    <width>328</width>
                    <height>240</height>
                    <background_color><![CDATA[#e9eaed]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7a05b9b6031a11f0a10b4ccc6a8f7014</id>
                <name><![CDATA[i_d_ref]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'
if hil.read_analog_signal(name = "ctrl") == 2:
    hil.set_scada_input_value('i_d_ref', inputValue)


elif hil.read_analog_signal(name = "ctrl")  == 11:
    hil.set_scada_input_value('i_d_ref', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = 0

controlant=0;
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.
control = hil.read_analog_signal(name = "ctrl")

if (control!=controlant):
    widgetValue = 0
    controlant=control;
else:
    widgetValue = None]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>0.0</min>
                <max>100.0</max>
                <step>1.0</step>
                <widget_settings>
                    <x>26</x>
                    <y>400</y>
                    <width>200</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7a05b9b7031a11f0bc7f4ccc6a8f7014</id>
                <name><![CDATA[i_q_ref]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'
# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
if hil.read_analog_signal(name = "ctrl")  == 2:
    hil.set_scada_input_value('i_q_ref', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = 0
controlant=0;
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.
control = hil.read_analog_signal(name = "ctrl")

if (control!=controlant):
    widgetValue = 0
    controlant=control;
else:
    widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>0.0</min>
                <max>100.0</max>
                <step>1.0</step>
                <widget_settings>
                    <x>26</x>
                    <y>400</y>
                    <width>200</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7a05b9b8031a11f0a1564ccc6a8f7014</id>
                <name><![CDATA[Macro]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

control = hil.read_analog_signal(name = "ctrl") 
controlant=0;
]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
control = hil.read_analog_signal(name = "ctrl");
if control != controlant:
   if control == 2:
      aparecer(Idref, Iqref, ganancias2)
      desaparecer(Ppuref, Qpuref, Vhref, ganancias3, ganancias11)
      hil.set_scada_input_value('V_h_ref', 0)
      hil.set_scada_input_value('i_d_ref', 0)
      hil.set_scada_input_value('P_pu_ref', 0)
      hil.set_scada_input_value('Q_pu_ref', 0)
      
      hil.set_scada_input_value('K_i_p', 3)
      hil.set_scada_input_value('K_i_i', 320)

      hil.set_scada_input_value('Kp_dc', 0)
      hil.set_scada_input_value('Ki_dc', 0)




   elif control ==3:
      aparecer(Ppuref, Qpuref, ganancias3)
      desaparecer(Idref, Iqref, Vhref, ganancias2, ganancias11)
      hil.set_scada_input_value('V_h_ref', 0)
      hil.set_scada_input_value('i_d_ref', 0)
      hil.set_scada_input_value('i_d_ref', 0)
      hil.set_scada_input_value('i_q_ref', 0)
      hil.set_scada_input_value('Kp_dc', 0)
      hil.set_scada_input_value('Ki_dc', 0)
      hil.set_scada_input_value('K_i_p', 3)
      hil.set_scada_input_value('K_i_i', 320)


#   elif control ==11:
#      aparecer(Vhref, Idref, ganancias11)
#      desaparecer(Ppuref, Qpuref, Iqref, ganancias2, ganancias3)
#      hil.set_scada_input_value('P_pu_ref', 0)
#      hil.set_scada_input_value('Q_pu_ref', 0)
#      hil.set_scada_input_value('i_d_ref', 0)
#      hil.set_scada_input_value('i_q_ref', 0)
#      hil.set_scada_input_value('K_i_p', 0)
#      hil.set_scada_input_value('K_i_i', 0)
#      hil.set_scada_input_value('Kp_dc', 0.15)
#      hil.set_scada_input_value('Ki_dc', 1.5)


   elif control ==11:
      aparecer(Vhref, Qpuref, ganancias11)
      desaparecer(Ppuref, Idref, Iqref, ganancias2, ganancias3)
      hil.set_scada_input_value('P_pu_ref', 0)
      #hil.set_scada_input_value('Q_pu_ref', 0)
      hil.set_scada_input_value('i_d_ref', 0)
      hil.set_scada_input_value('i_q_ref', 0)
      hil.set_scada_input_value('K_i_p', 0)
      hil.set_scada_input_value('K_i_i', 0)
      hil.set_scada_input_value('Kp_dc', 0.15)
      hil.set_scada_input_value('Ki_dc', 1.5)


controlant = control;

if hil.read_analog_signal(name = "ctrl") == 11:
    hil.set_scada_input_value('interruptor_STATCOM', 0)
else:
    hil.set_scada_input_value('interruptor_STATCOM', 1)
]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <widget_settings>
                    <x>728</x>
                    <y>320</y>
                    <width>128</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7a05e0df031a11f0aee14ccc6a8f7014</id>
                <name><![CDATA[P_pu_ref]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'
if hil.read_analog_signal(name = "ctrl")  == 3:
    hil.set_scada_input_value('P_pu_ref', inputValue)
    hil.set_scada_input_value('V_h_ref', 0)
    hil.set_scada_input_value('i_d_ref', 0)
    hil.set_scada_input_value('i_q_ref', 0)


]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = 0
controlant=0;
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.
control = hil.read_analog_signal(name = "ctrl")

if (control!=controlant):
    widgetValue = 0
    controlant=control;
else:
    widgetValue = None

]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>-20000.0</min>
                <max>20000.0</max>
                <step>1.0</step>
                <widget_settings>
                    <x>110</x>
                    <y>80</y>
                    <width>200</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7a05e0e0031a11f0a98a4ccc6a8f7014</id>
                <name><![CDATA[Q_pu_ref]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'
# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
if hil.read_analog_signal(name = "ctrl")  == 3:
    hil.set_scada_input_value('Q_pu_ref', inputValue)
if hil.read_analog_signal(name = "ctrl")  == 11:
    hil.set_scada_input_value('Q_pu_ref', inputValue)
    
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = 0
controlant=0;
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.
control = hil.read_analog_signal(name = "ctrl")

if (control!=controlant):
    widgetValue = 0
    controlant=control;
else:
    widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>-20000.0</min>
                <max>20000.0</max>
                <step>1.0</step>
                <widget_settings>
                    <x>110</x>
                    <y>160</y>
                    <width>200</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7a05e0e1031a11f08ece4ccc6a8f7014</id>
                <name><![CDATA[V_h_ref]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'
if hil.read_analog_signal(name = "ctrl") == 11:
    hil.set_scada_input_value('V_h_ref', inputValue)


]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = 0
controlant=0;]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.
control = hil.read_analog_signal(name = "ctrl")

if (control!=controlant):
    widgetValue = 0
    controlant=control;
else:
    widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>0.0</min>
                <max>730.0</max>
                <step>1.0</step>
                <widget_settings>
                    <x>26</x>
                    <y>400</y>
                    <width>200</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7a05e0e6031a11f0a62a4ccc6a8f7014</id>
                <name><![CDATA[KP]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'

if hil.read_analog_signal(name = "ctrl") == 2:
    hil.set_scada_input_value('K_i_p', inputValue)
elif hil.read_analog_signal(name = "ctrl") == 3:
    hil.set_scada_input_value('K_i_p', inputValue)
elif hil.read_analog_signal(name = "ctrl") == 11:
    hil.set_scada_input_value('Kp_dc', inputValue)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = 0
controlant=0;
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.

control = hil.read_analog_signal(name = "ctrl")

if (control!=controlant):
    if control==11:
      widgetValue = 0.15
    elif (control==2 or control==3):
      widgetValue = 3
    controlant=control;
else:
    widgetValue = None]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[]]></unit>
                <widget_settings>
                    <x>472</x>
                    <y>56</y>
                    <width>216</width>
                    <height>64</height>
                    <inputWidgetWidth>180</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7a060826031a11f08e734ccc6a8f7014</id>
                <name><![CDATA[KI]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'
if hil.read_analog_signal(name = "ctrl") == 2:
    hil.set_scada_input_value('K_i_i', inputValue)
elif hil.read_analog_signal(name = "ctrl") == 3:
    hil.set_scada_input_value('K_i_i', inputValue)
elif hil.read_analog_signal(name = "ctrl") == 11:
    hil.set_scada_input_value('Ki_dc', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = 0
controlant=0;

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.

control = hil.read_analog_signal(name = "ctrl")

if (control!=controlant):
    if control==11:
      widgetValue = 1.5
    elif (control==2 or control==3):
      widgetValue = 320
    controlant=control;
else:
    widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[]]></unit>
                <widget_settings>
                    <x>744</x>
                    <y>56</y>
                    <width>216</width>
                    <height>64</height>
                    <inputWidgetWidth>180</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>84c3f6f1031a11f095fc4ccc6a8f7014</id>
                <name><![CDATA[ WIRES]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'

if inputValue == '3':
    hil.set_scada_input_value('hilos', 3)
    pass
elif inputValue == '4':
    hil.set_scada_input_value('hilos', 4)
    pass
else:
    hil.set_scada_input_value('hilos', 3)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = '3'
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[3]]></inputValue>
                <availableValues><![CDATA[['3', '4']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <autocomplete_enabled>False</autocomplete_enabled>
                <widget_settings>
                    <x>360</x>
                    <y>48</y>
                    <width>128</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>97b83c0e031a11f0adb64ccc6a8f7014</id>
                <name><![CDATA[Text note2]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-weight:600;">   </span><span style=" font-size:11pt; font-weight:600;">CTRL 2 dq current reference    CTRL 3 PQ current reference    CTRL 11 STATCOM  </span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:11pt;">       Idmax 20A                                      Pn 20kW                                          Vhmax 730V</span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:11pt;">       Iqmax 20A                                      Qn 20 kvar                                       Idmax 20A </span></p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>16</x>
                    <y>128</y>
                    <width>616</width>
                    <height>96</height>
                    <background_color><![CDATA[#e9eaed]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d44e425c031b11f0adba4ccc6a8f7014</id>
                <name><![CDATA[PLL frequency]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[f_vsg]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>500</updateRate>
                <decimals>2</decimals>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>248</width>
                    <height>144</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>100.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>1ac37d51031c11f0aa964ccc6a8f7014</id>
                <name><![CDATA[GANANCIAS3]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">   <span style=" font-size:12pt;">                                                   </span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">                                       </span><span style=" font-size:12pt; font-weight:600;">CTRL 3 PQ current reference :  </span><span style=" font-size:12pt;">  K_i_p = 3      </span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">                                                                                                    K_i_i = 320 </span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">                                                                            </span><span style=" font-size:9pt;">                               </span></p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;"><br /></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:9pt;">                         </span></p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>384</x>
                    <y>160</y>
                    <width>656</width>
                    <height>96</height>
                    <background_color><![CDATA[#e9eaed]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b51cf833031e11f090684ccc6a8f7014</id>
                <name><![CDATA[Macro]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

control = hil.read_analog_signal(name = "ctrl") 
controlant=0;
desaparecer1(SCOPE, GUARDAR, FRECUENCIA, PARAMETROS)
desaparecer_otros(marco1,marco2,marco3,display_red,RED,red_info,red)

desaparecer2(image1, image2, grafica1, grafica2, grafica3)
panel.set_property_value(image, "position", [6000, 3000])
panel.set_property_value(grafica4, "position", [6000, 3000])
panel.set_property_value(grafica5, "position", [6000, 3000])

display_corriente_0(Vbus, Vh,Intensidades,Ia,Ib,Ic,tensiones,Va,Vb,Vc,Potencias,P3f,Q3f)


]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
control = hil.read_analog_signal(name = "ctrl");


if control != controlant:
   if control == 0:
      desaparecer1(SCOPE, GUARDAR, FRECUENCIA, PARAMETROS)
      desaparecer_otros(marco1,marco2,marco3,display_red,RED,red_info,red)
      desaparecer2(image1, image2, grafica1, grafica2, grafica3)
      panel.set_property_value(grafica4, "position", [6000, 3000])
      panel.set_property_value(image, "position", [6000, 3000])
      panel.set_property_value(grafica5, "position", [6000, 3000])
      display_corriente_0(Vbus, Vh,Intensidades,Ia,Ib,Ic,tensiones,Va,Vb,Vc,Potencias,P3f,Q3f)
   elif control ==3:
      aparecer1(SCOPE, GUARDAR, FRECUENCIA, PARAMETROS)
      aparecer_otros(marco1,marco2,marco3,display_red,RED,red_info,red)
      aparecer2(image1, grafica3, grafica4)
      desaparecer2(image, image2, grafica1, grafica2, grafica5)
      display_corriente_2(Vbus, Vh,Intensidades,Ia,Ib,Ic,tensiones,Va,Vb,Vc,Potencias,P3f,Q3f)
   elif control ==2:
      aparecer1(SCOPE, GUARDAR, FRECUENCIA, PARAMETROS)
      aparecer_otros(marco1,marco2,marco3,display_red,RED,red_info,red)
      aparecer2(image, grafica1, grafica2)
      desaparecer2(image1, image2, grafica3, grafica4, grafica5)
      display_corriente_2(Vbus, Vh,Intensidades,Ia,Ib,Ic,tensiones,Va,Vb,Vc,Potencias,P3f,Q3f)
   elif control ==11:
      aparecer1(SCOPE, GUARDAR, FRECUENCIA, PARAMETROS)
      aparecer_otros(marco1,marco2,marco3,display_red,RED,red_info,red)
      aparecer2(image2, grafica5, grafica2)
      desaparecer2(image1, image, grafica1, grafica3, grafica4)
      display_corriente_11(Vbus, Vh,Intensidades,Ia,Ib,Ic,tensiones,Va,Vb,Vc,Potencias,P3f,Q3f)

controlant = control;





]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <widget_settings>
                    <x>528</x>
                    <y>1496</y>
                    <width>128</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>84c3f6ef031a11f0b8894ccc6a8f7014</id>
                <name><![CDATA[ CONTROL]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.
# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'CURRENT':
    hil.set_scada_input_value('Control', 2)
    pass
elif inputValue == 'POWER':
    hil.set_scada_input_value('Control', 3)
    pass
elif inputValue == 'STATCOM':
    hil.set_scada_input_value('Control', 11)
    pass
elif inputValue == '-':
    hil.set_scada_input_value('Control', 0)
    pass]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = '-'
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it,
# widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change the widget value by setting this variable.
# NOTE: If you do not specify a 'widgetValue' variable or assign 'None' to it,
# the widget value will not be changed.
widgetValue = None

]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[-]]></inputValue>
                <availableValues><![CDATA[['CURRENT', 'POWER', 'STATCOM', '-']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <autocomplete_enabled>False</autocomplete_enabled>
                <widget_settings>
                    <x>104</x>
                    <y>40</y>
                    <width>181</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a889b206031f11f0a1ed4ccc6a8f7014</id>
                <name><![CDATA[Capture/Scope]]></name>
                <type>Capture/Scope</type>
                <description><![CDATA[]]></description>
                <working_mode>embedded</working_mode>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>1488</width>
                    <height>488</height>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                    <appearance><![CDATA[Flat]]></appearance>
                    <state>Capture</state>
                    <layout>None</layout>
                    <virtual_signals_definitions>
                    </virtual_signals_definitions>
                    <presets>
                        <active_capture_preset><![CDATA[Default]]></active_capture_preset>
                        <active_scope_preset><![CDATA[Default]]></active_scope_preset>
                        <capture name="Default">
                            <time_interval>0.6</time_interval>
                            <sample_rate>20000.0</sample_rate>
                            <background_color>white</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <analog_signals>
                            </analog_signals>
                            <digital_signals>
                                <digital>
                                    <channel>0</channel>
                                    <name><![CDATA[HIL0 digital input 20]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_offset>0.0</vertical_offset>
                                    <row>0</row>
                                    <viewports>
                                        
                                   </viewports>
                                </digital>
                            </digital_signals>
                            <virtual_signals>
                            </virtual_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>True</is_force>
                                <type>Digital</type>
                                <source><![CDATA[HIL0 digital input 20]]></source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>0.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                            <plotting_options in_use="False">
                                <subplots>
                                    </subplots>
                            </plotting_options>
                        </capture>
                        <scope name="Default">
                            <background_color>white</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <show_viewports>3</show_viewports>
                            <decimation>21.0</decimation>
                            <time_base>0.02</time_base>
                            <analog_signals>
                            </analog_signals>
                            <digital_signals>
                                <digital>
                                    <channel>0</channel>
                                    <name><![CDATA[HIL0 digital input 20]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_offset>0.0</vertical_offset>
                                    <row>0</row>
                                    <viewports>
                                        
                                        <num_viewport>3</num_viewport>
                                        
                                   </viewports>
                                </digital>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>False</is_force>
                                <type>Digital</type>
                                <source>HIL0 digital input 20</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                        </scope>
                        <scope name="idq">
                            <background_color>white</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <show_viewports>1</show_viewports>
                            <decimation>50.0</decimation>
                            <time_base>0.05</time_base>
                            <analog_signals>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>-1</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>None</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                        </scope>
                        </presets>
                    <capture>
                        <time_interval>0.6</time_interval>
                        <sample_rate>20000.0</sample_rate>
                        <background_color>white</background_color>
                        <layout>Vertical</layout>
                        <legend>True</legend>
                        <trigger>
                            <type>Digital</type>
                            <source>HIL0 digital input 20</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>0.0</offset>
                            <useFirstTrigger>False</useFirstTrigger>
                        </trigger>
                        <analog_signals>
                        </analog_signals>
                         <digital_signals>
                            <digital>
                                    <channel>0</channel>
                                    <name><![CDATA[HIL0 digital input 20]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_offset>0.0</vertical_offset>
                                    <row>0</row>
                                    <viewports>
                                        
                                   </viewports>
                                </digital>
                         </digital_signals>
                    </capture>
                    <scope>
                        <time_base>0.02 </time_base>
                        <background_color>white</background_color>
                        <layout>Vertical</layout>
                        <legend>True</legend>
                        <trigger>
                            <mode>Auto</mode>
                            <type>Digital</type>
                            <source>HIL0 digital input 20</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>50.0</offset>
                        </trigger>
                         <analog_signals>
                        </analog_signals>
                        <digital_signals>
                            <digital>
                                    <channel>0</channel>
                                    <name><![CDATA[HIL0 digital input 20]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_offset>0.0</vertical_offset>
                                    <row>0</row>
                                    <viewports>
                                        
                                        <num_viewport>3</num_viewport>
                                        
                                   </viewports>
                                </digital>
                        </digital_signals>
                    </scope>
                    <plotting_options in_use="False">
                    
                        <subplots>
                            </subplots>
                    </plotting_options>
                </widget_settings>

            </component_data>
        <component_data>
                <id>ebeb873a032411f0a7f24ccc6a8f7014</id>
                <name><![CDATA[Signal data logger]]></name>
                <type>SignalDataLogger</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <expression_code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be logged into the data file
# specify logging data ("names" and "values" parts are mandatory)
data = {
    # signals/data names: ["Signal 1 name","Signal 2 name","Signal 3 name"]
    "names": [],

    # signals/data values: [sigVal1,sigVal2,sigVal3]
    "values": [],
    }
]]></expression_code>
                <analog_signals><![CDATA[['p', 'q']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <update_rate>500</update_rate>
                <use_slower_update_rate>False</use_slower_update_rate>
                <slower_update_rate>2</slower_update_rate>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>120</width>
                    <height>120</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <data_file_settings>
                    <data_file_dir><![CDATA[None]]></data_file_dir>
                    <data_file_name><![CDATA[signals_data]]></data_file_name>
                    <use_panel_file_dir>True</use_panel_file_dir>
                    <data_file_format><![CDATA[csv]]></data_file_format>
                    <use_file_name_suffix><![CDATA[True]]></use_file_name_suffix>
                    <start_logging_on_sim_start><![CDATA[False]]></start_logging_on_sim_start>
                </data_file_settings>
            </component_data>
        <component_data>
                <id>5e503663032a11f0b52d4ccc6a8f7014</id>
                <name><![CDATA[Q3f]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Q3f]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>5e503664032a11f0b3ae4ccc6a8f7014</id>
                <name><![CDATA[P3f]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[P3f]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>61bb7299032a11f098fd4ccc6a8f7014</id>
                <name><![CDATA[red_info]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">  0 - RED desconectada</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">  1 - RED conectada</p></body></html>]]></text>
                <widget_settings>
                    <x>3000</x>
                    <y>3000</y>
                    <width>128</width>
                    <height>80</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>995883e203e311f08d2b4ccc6a8f7014</id>
                <name><![CDATA[GANANCIAS2]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">   <span style=" font-size:12pt;">                                                   </span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">                                       </span><span style=" font-size:12pt; font-weight:600;">CTRL 2 dq current reference :  </span><span style=" font-size:12pt;">  K_i_p = 3      </span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">                                                                                                    K_i_i = 320 </span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">                                                                            </span><span style=" font-size:9pt;">                               </span></p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;"><br /></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:9pt;">                         </span></p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>26</x>
                    <y>400</y>
                    <width>656</width>
                    <height>96</height>
                    <background_color><![CDATA[#e9eaed]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b5d4f63b03e311f09f444ccc6a8f7014</id>
                <name><![CDATA[GANANCIAS11]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">   <span style=" font-size:12pt;">                                                   </span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">                                       </span><span style=" font-size:12pt; font-weight:600;">CTRL 11 STATCOM :  </span><span style=" font-size:12pt;">  Kp-dc=0.15   </span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">                                                                                  Ki_dc = 1.5 </span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">                                                                            </span><span style=" font-size:9pt;">                               </span></p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;"><br /></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:9pt;">                         </span></p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>26</x>
                    <y>400</y>
                    <width>656</width>
                    <height>96</height>
                    <background_color><![CDATA[#e9eaed]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>cf07bc2403e811f09f984ccc6a8f7014</id>
                <name><![CDATA[Image3]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[Imagen\typhoon_logo.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <widget_settings>
                    <x>136</x>
                    <y>320</y>
                    <width>264</width>
                    <height>216</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>False</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>cd3b4b3c03f011f081634ccc6a8f7014</id>
                <name><![CDATA[POTENCIA ACTIVA]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],

    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],

    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],

    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['P3f', 'p_ref']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{'P3f': 1.0, 'p_ref': 200.0}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>664</width>
                    <height>328</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[time (s)]]></x_title>
                    <y_title><![CDATA[P (W)]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>30000.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>True</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>09ddc12803f111f0b2ff4ccc6a8f7014</id>
                <name><![CDATA[POTENCIA REACTIVA]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],

    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],

    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],

    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Q3f', 'q_ref']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{'Q3f': 1.0, 'q_ref': 200.0}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>672</width>
                    <height>320</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[time (s)]]></x_title>
                    <y_title><![CDATA[Q (var)]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>30000.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>True</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>0d700ec203f111f085744ccc6a8f7014</id>
                <name><![CDATA[INTENSIDAD (Iq)]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],

    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],

    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],

    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['iq', 'I_q_ref']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{'iq': 1.0, 'I_q_ref': 0.2}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>640</width>
                    <height>328</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[time (s)]]></x_title>
                    <y_title><![CDATA[Iq (A)]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>30.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>True</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>1553e41f03f111f0a80f4ccc6a8f7014</id>
                <name><![CDATA[TENSIÓN BUS DE CONTINUA]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],

    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],

    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],

    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['V_h', 'Vh_ref']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{'V_h': 1.0, 'Vh_ref': 1.0}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>664</width>
                    <height>328</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[time (s)]]></x_title>
                    <y_title><![CDATA[Vh (V)]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>1000.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>True</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>18a3987903f111f095244ccc6a8f7014</id>
                <name><![CDATA[INTENSIDAD (Id)]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],

    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],

    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],

    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['id', 'I_d_ref']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{'id': 1.0, 'I_d_ref': 0.2}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>640</width>
                    <height>328</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[time (s)]]></x_title>
                    <y_title><![CDATA[Id (A)]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>30.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>True</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>5e501190032a11f080324ccc6a8f7014</id>
                <name><![CDATA[tensiones]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>432</width>
                    <height>56</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>6725777a056c11f088794ccc6a8f7014</id>
                <name><![CDATA[Vc]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[vcrms]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>5e503667032a11f08eba4ccc6a8f7014</id>
                <name><![CDATA[Vb]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[vbrms]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>5e503661032a11f0bebb4ccc6a8f7014</id>
                <name><![CDATA[Va]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[varms]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a5f65503056c11f0bb6b4ccc6a8f7014</id>
                <name><![CDATA[Ib]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[ibrms]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a5f65502056c11f08afd4ccc6a8f7014</id>
                <name><![CDATA[Ic]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[icrms]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>6000</x>
                    <y>3000</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>61bb4b8e032a11f0a9f14ccc6a8f7014</id>
                <name><![CDATA[GRID]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

if boton3==1:
   hil.set_scada_input_value('interruptor_red', 0)
   boton3=0
elif boton3==0:
   hil.set_scada_input_value('interruptor_red', 1)
   boton3=1]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

hil.set_scada_input_value('interruptor_red', 1)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>3000</x>
                    <y>3000</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>61bb729a032a11f0b99b4ccc6a8f7014</id>
                <name><![CDATA[-]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[RED]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>3000</x>
                    <y>3000</y>
                    <width>96</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>c0918d82584011f0a4da28ee521e9575</id>
                <name><![CDATA[ctrl]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[ctrl]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>1728</x>
                    <y>1120</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>True</color_range>
                    <green_range>(150.0, 170.0, 100.0, 120.0)</green_range>
                    <orange_range>(120.0, 140.0, 140.0, 150.0)</orange_range>
                    <red_range>(2.0, 9.0, 9.0, 12.0)</red_range>
                </advance_widget_settings>
            </component_data>
        </components>
</ui_settings>