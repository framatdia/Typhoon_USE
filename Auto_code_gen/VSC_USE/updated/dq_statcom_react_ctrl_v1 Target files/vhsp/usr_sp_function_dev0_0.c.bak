// generated using template: cop_main.template---------------------------------------------
/******************************************************************************************
**
**  Module Name: cop_main.c
**  NOTE: Automatically generated file. DO NOT MODIFY!
**  Description:
**            Main file
**
******************************************************************************************/
// generated using template: arm/custom_include.template-----------------------------------


#ifdef __cplusplus
#include <limits>

extern "C" {
#endif

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <stdint.h>
#include <complex.h>

// x86 libraries:
#include "../include/sp_functions_dev0.h"


#ifdef __cplusplus
}
#endif


// ----------------------------------------------------------------------------------------                // generated using template:generic_macros.template-----------------------------------------
/*********************** Macros (Inline Functions) Definitions ***************************/

// ----------------------------------------------------------------------------------------

#ifndef MAX
#define MAX(value, limit) (((value) > (limit)) ? (value) : (limit))
#endif
#ifndef MIN
#define MIN(value, limit) (((value) < (limit)) ? (value) : (limit))
#endif

// generated using template: VirtualHIL/custom_defines.template----------------------------

typedef unsigned char X_UnInt8;
typedef char X_Int8;
typedef signed short X_Int16;
typedef unsigned short X_UnInt16;
typedef int X_Int32;
typedef unsigned int X_UnInt32;
typedef unsigned int uint;
typedef double real;

// ----------------------------------------------------------------------------------------                
// generated using template: custom_consts.template----------------------------------------

// arithmetic constants
#define C_SQRT_2                    1.4142135623730950488016887242097f
#define C_SQRT_3                    1.7320508075688772935274463415059f
#define C_PI                        3.1415926535897932384626433832795f
#define C_E                         2.7182818284590452353602874713527f
#define C_2PI                       6.283185307179586476925286766559f

//@cmp.def.start
//component defines























    



    #define SQRT_2OVER3 0.8164965809277260327324280249019f
    #define SQRT3_OVER_2 0.8660254037844386467637231707529f
    #define ONE_DIV_BY_SQRT_3 0.57735026918962576450914878f
















































    













    

    


























//@cmp.def.end


//-----------------------------------------------------------------------------------------                 
// generated using template: common_variables.template-------------------------------------
// true global variables





// const variables

//@cmp.var.start
// variables
        double _plant_p_ref_load__out;
        double _plant_q_ref_load__out;
         double _plant_vbr_variable_load1_control_constant3__out = 1.0;
         double _plant_vbr_variable_load1_control_constant4__out = 0.0;
         double _plant_vbr_variable_load1_control_constant5__out = 0.0;
      double _plant_vbr_variable_load1_control_limit_pqref_unit_delay1__out;
      double _plant_vbr_variable_load1_control_limit_pqref_unit_delay2__out;
        double _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__out;
        double _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__b_coeff[2] = {-4.440892098500626e-16, 6.168500184089432e-05};
        double _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__a_coeff[3] = {1.0, -1.9888944722799997, 0.98895615728184};
        double _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__a_sum;
        double _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__b_sum;
        double _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__delay_line_in;        double _plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator1__out;
        double _plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator2__out;
      double _plant_vbr_variable_load1_control_three_phase_pll2_unit_delay1__out;
        double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__out;
        double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__previous_filtered_value;        double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__out;
        double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__previous_filtered_value;    double _plant_vbr_variable_load1_ia_ia1__out;
    double _plant_vbr_variable_load1_ib_ia1__out;
    double _plant_vbr_variable_load1_ic_ia1__out;
    double _plant_vbr_variable_load1_va_va1__out;
    double _plant_vbr_variable_load1_vb_va1__out;
    double _plant_vbr_variable_load1_vc_va1__out;
         double _plant_enable_load__out = 1.0;
double _plant_vbr_variable_load1_control_three_phase_pll2_to_hz__out;double _plant_vbr_variable_load1_control_gain1__out;double _plant_vbr_variable_load1_control_gain2__out;                double _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in1;
                double _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in2;

                        double _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in2_pu;
                    double _plant_vbr_variable_load1_control_three_phase_pll2_normalize__pk;

    double _plant_vbr_variable_load1_control_abc_to_dq1_abc_to_alpha_beta__alpha;
    double _plant_vbr_variable_load1_control_abc_to_dq1_abc_to_alpha_beta__beta;
    double _plant_vbr_variable_load1_control_abc_to_dq1_abc_to_alpha_beta__gamma;
    double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_abc_to_alpha_beta__alpha;
    double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_abc_to_alpha_beta__beta;
    double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_abc_to_alpha_beta__gamma;
    double _plant_vbr_variable_load1_power_meter1__Pdc;
    double _plant_vbr_variable_load1_power_meter1__Qdc;
    double _plant_vbr_variable_load1_power_meter1__P0dc;
    double _plant_vbr_variable_load1_power_meter1__Pac;
    double _plant_vbr_variable_load1_power_meter1__Qac;
    double _plant_vbr_variable_load1_power_meter1__P0ac;
    double _plant_vbr_variable_load1_power_meter1__apparent;
    double _plant_vbr_variable_load1_power_meter1__k_factor;
    double _plant_vbr_variable_load1_power_meter1__v_alpha;
    double _plant_vbr_variable_load1_power_meter1__v_beta;
    double _plant_vbr_variable_load1_power_meter1__i_alpha;
    double _plant_vbr_variable_load1_power_meter1__i_beta;
    double _plant_vbr_variable_load1_power_meter1__v_zero;
    double _plant_vbr_variable_load1_power_meter1__i_zero;
    double _plant_vbr_variable_load1_power_meter1__filter_1_output;
    double _plant_vbr_variable_load1_power_meter1__filter_1_outputQ;
    double _plant_vbr_variable_load1_power_meter1__filter_1_outputP0;
    	double _plant_bus_join1__out[3];
double _plant_vbr_variable_load1_control_gain3__out;double _plant_vbr_variable_load1_control_current_ref_product4__out;
double _plant_vbr_variable_load1_control_current_ref_product5__out;
double _plant_vbr_variable_load1_control_current_ref_product3__out;
double _plant_vbr_variable_load1_control_current_ref_product6__out;
double _plant_vbr_variable_load1_control_gain12__out;double _plant_vbr_variable_load1_control_three_phase_pll2_pid_kd__out;double _plant_vbr_variable_load1_control_three_phase_pll2_pid_ki__out;double _plant_vbr_variable_load1_control_three_phase_pll2_pid_kp__out;    double _plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__d;
    double _plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__q;
    double _plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__k1;
    double _plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__k2;
    double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__d;
    double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__q;
    double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__k1;
    double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__k2;
    	double _plant_vbr_variable_load1_bus_join2__out[4];
        double _plant_vbr_variable_load1_subsystem1_bus_split1__out;         double _plant_vbr_variable_load1_subsystem1_bus_split1__out1;         double _plant_vbr_variable_load1_subsystem1_bus_split1__out2;     double _plant_vbr_variable_load1_control_current_ref_sum3__out;
    double _plant_vbr_variable_load1_control_current_ref_sum4__out;
double _plant_vbr_variable_load1_control_current_ref_product7__out;
    double _plant_vbr_variable_load1_control_three_phase_pll2_pid_sum8__out;
double _plant_vbr_variable_load1_control_gain4__out;double _plant_vbr_variable_load1_control_gain5__out;        double _plant_bus_split2__out;         double _plant_bus_split2__out1;         double _plant_bus_split2__out2;         double _plant_bus_split2__out3;     double _plant_vbr_variable_load1_control_signal_switch1__out;
    double _plant_vbr_variable_load1_control_signal_switch2__out;
        double _plant_vbr_variable_load1_control_current_control_pi_d_integrator1__out;
        double _plant_vbr_variable_load1_control_current_control_pi_q_integrator1__out;
    float _plant_vbr_variable_load1_enable_probe__tmp;
    double _plant_vbr_variable_load1_control_current_ref_limit3__out;
double _plant_vbr_variable_load1_control_three_phase_pll2_pid_gain1__out;double _plant_vbr_variable_load1_control_current_control_product2__out;
double _plant_vbr_variable_load1_control_current_control_product1__out;
double _plant_vbr_variable_load1_control_gain8__out;double _plant_vbr_variable_load1_control_gain9__out;double _plant_vbr_variable_load1_control_current_ref_product1__out;
double _plant_vbr_variable_load1_control_current_ref_product2__out;
    double _plant_vbr_variable_load1_control_three_phase_pll2_pid_sum5__out;
double _plant_vbr_variable_load1_control_current_control_gain11__out;double _plant_vbr_variable_load1_control_current_control_gain8__out;                double _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Pref;
                double _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Qref;
                double _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax;

                        double _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P;
                    double _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q;
                    double _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__S;

    double _plant_vbr_variable_load1_control_current_control_sum4__out;
    double _plant_vbr_variable_load1_control_current_control_sum2__out;
    double _plant_vbr_variable_load1_control_three_phase_pll2_pid_limit1__out;
        double _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__out;

    double _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__rising_rate_lim[1];
    double _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__falling_rate_lim[1];

        double _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__out;

    double _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__rising_rate_lim[1];
    double _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__falling_rate_lim[1];

        double _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__out;

    double _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__rising_rate_lim[1];
    double _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__falling_rate_lim[1];

double _plant_vbr_variable_load1_control_current_control_pi_q_ki__out;double _plant_vbr_variable_load1_control_current_control_pi_q_kp__out;double _plant_vbr_variable_load1_control_current_control_pi_d_ki__out;double _plant_vbr_variable_load1_control_current_control_pi_d_kp__out;    double _plant_vbr_variable_load1_control_three_phase_pll2_pid_sum6__out;
        double _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__out;

    double _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__rising_rate_lim[1];
    double _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__falling_rate_lim[1];

                double _plant_vbr_variable_load1_control_three_phase_pll2_integrator__in;

                        double _plant_vbr_variable_load1_control_three_phase_pll2_integrator__out;

                double _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Pref;
                double _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Qref;
                double _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Sref;

                        double _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__P;
                    double _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Q;

    double _plant_vbr_variable_load1_control_current_control_pi_q_sum5__out;
    double _plant_vbr_variable_load1_control_current_control_pi_d_sum5__out;
double _plant_vbr_variable_load1_control_three_phase_pll2_pid_kb__out;    double _plant_vbr_variable_load1_control_current_control_pi_q_limit1__out;
    double _plant_vbr_variable_load1_control_current_control_pi_d_limit1__out;
    double _plant_vbr_variable_load1_control_three_phase_pll2_pid_sum7__out;
double _plant_vbr_variable_load1_control_current_control_gain10__out;    double _plant_vbr_variable_load1_control_current_control_pi_q_sum6__out;
double _plant_vbr_variable_load1_control_current_control_gain9__out;    double _plant_vbr_variable_load1_control_current_control_pi_d_sum6__out;
    double _plant_vbr_variable_load1_control_current_control_sum6__out;
double _plant_vbr_variable_load1_control_current_control_pi_q_kb__out;    double _plant_vbr_variable_load1_control_current_control_sum1__out;
double _plant_vbr_variable_load1_control_current_control_pi_d_kb__out;    double _plant_vbr_variable_load1_control_current_control_limit2__out;
    double _plant_vbr_variable_load1_control_current_control_pi_q_sum7__out;
    double _plant_vbr_variable_load1_control_current_control_limit1__out;
    double _plant_vbr_variable_load1_control_current_control_pi_d_sum7__out;
double _plant_vbr_variable_load1_control_current_control_gain13__out;double _plant_vbr_variable_load1_control_current_control_gain12__out;    double _plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__alpha;
    double _plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__beta;
    double _plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__k1;
    double _plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__k2;
    double _plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__A;
    double _plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__B;
    double _plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__C;
//@cmp.var.end

//@cmp.svar.start
// state variables
    double _plant_p_ref_load__state;
    double _plant_q_ref_load__state;
      double _plant_vbr_variable_load1_control_limit_pqref_unit_delay1__state;
      double _plant_vbr_variable_load1_control_limit_pqref_unit_delay2__state;
            double _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__states[2];
        double _plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator1__state;
        double _plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator2__state;
      double _plant_vbr_variable_load1_control_three_phase_pll2_unit_delay1__state;
        double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__filtered_value;
        double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__previous_in;        double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__filtered_value;
        double _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__previous_in;
    

    double _plant_vbr_variable_load1_power_meter1__filter_1_output_k_minus_1;     double _plant_vbr_variable_load1_power_meter1__filter_1_input_k_minus_1;     double _plant_vbr_variable_load1_power_meter1__filter_1_output_k_minus_1Q;     double _plant_vbr_variable_load1_power_meter1__filter_1_input_k_minus_1Q;     double _plant_vbr_variable_load1_power_meter1__filter_1_output_k_minus_1P0;     double _plant_vbr_variable_load1_power_meter1__filter_1_input_k_minus_1P0;         double _plant_vbr_variable_load1_control_current_control_pi_d_integrator1__state;double _plant_vbr_variable_load1_control_current_control_pi_d_integrator1__reset_state;
        double _plant_vbr_variable_load1_control_current_control_pi_q_integrator1__state;double _plant_vbr_variable_load1_control_current_control_pi_q_integrator1__reset_state;
            double _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__signQ;

            double _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__signP;

            double _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Sref;


    

    double _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__state;
    X_Int32 _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__first_step;
    double _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__state;
    X_Int32 _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__first_step;
    double _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__state;
    X_Int32 _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__first_step;
    double _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__state;
    X_Int32 _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__first_step;
            double _plant_vbr_variable_load1_control_three_phase_pll2_integrator__state;


    

            double _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__S_PQref;


    

//@cmp.svar.end

//
// Tunable parameters
//
static struct Tunable_params {
} __attribute__((__packed__)) tunable_params;

void *tunable_params_dev0_cpu0_ptr = &tunable_params;

// Dll function pointers
#if defined(_WIN64)
#else
    // Define handles for loading dlls
#endif







              
// generated using template: virtual_hil/custom_functions.template---------------------------------
void ReInit_user_sp_cpu0_dev0(){

#if DEBUG_MODE
    printf("\n\rReInitTimer");
#endif


    //@cmp.init.block.start
        _plant_p_ref_load__state = 0x0;

        _plant_q_ref_load__state = 0x0;

    
    
    
            _plant_vbr_variable_load1_control_limit_pqref_unit_delay1__state = 0.0;

            _plant_vbr_variable_load1_control_limit_pqref_unit_delay2__state = 0.0;

                X_UnInt32 _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i;
          

            for (_plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i = 0; _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i < 2; _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i++) {
                _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__states[_plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i] = 0;
            }

             

            _plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator1__state = 376.99111843;

             

            _plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator2__state = 0.0;

            _plant_vbr_variable_load1_control_three_phase_pll2_unit_delay1__state = 0.0;

            

            _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__filtered_value = 0.0 / (1 - 1.0 * 62.83185307 * 5e-05 );
        _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__previous_in = 0x0;

            

            _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__filtered_value = 0.0 / (1 - 1.0 * 62.83185307 * 5e-05 );
        _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__previous_in = 0x0;

    
    
    
    
    
    
    
    
    
    
        {
}

    
    
        _plant_vbr_variable_load1_power_meter1__filter_1_output_k_minus_1 = 0.0;     _plant_vbr_variable_load1_power_meter1__filter_1_input_k_minus_1 = 0.0;     _plant_vbr_variable_load1_power_meter1__filter_1_output_k_minus_1Q = 0.0;     _plant_vbr_variable_load1_power_meter1__filter_1_input_k_minus_1Q = 0.0;     _plant_vbr_variable_load1_power_meter1__filter_1_output_k_minus_1P0 = 0.0;     _plant_vbr_variable_load1_power_meter1__filter_1_input_k_minus_1P0 = 0.0; 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

      HIL_OutAO(0x4002, 0.0f);

    

      HIL_OutAO(0x4003, 0.0f);

    

      HIL_OutAO(0x4004, 0.0f);

    
    
    

      HIL_OutAO(0x4005, 0.0f);

    
    
    
    
    
    
    
    
    
    
             

            _plant_vbr_variable_load1_control_current_control_pi_d_integrator1__state = 0.0;
            _plant_vbr_variable_load1_control_current_control_pi_d_integrator1__reset_state = 2;

             

            _plant_vbr_variable_load1_control_current_control_pi_q_integrator1__state = 0.0;
            _plant_vbr_variable_load1_control_current_control_pi_q_integrator1__reset_state = 2;

    
    
    
    
    
    

      HIL_OutAO(0x4006, 0.0f);

    

      HIL_OutAO(0x4007, 0.0f);

    
    
    
    
    
    
    
        {
    _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Sref = 0 ;
}

    
    
    
          

        _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__state = 0;

    _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__first_step = 1;

          

        _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__state = 0;

    _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__first_step = 1;

          

        _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__state = 0;

    _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__first_step = 1;

    
    
    
    
    
          

        _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__state = 0;

    _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__first_step = 1;

        {
    _plant_vbr_variable_load1_control_three_phase_pll2_integrator__state = 0 ;
}

        {
    _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__S_PQref = 0 ;
}

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    HIL_OutFloat(137101312, 0.0);

    HIL_OutFloat(137101313, 0.0);

    HIL_OutFloat(137101314, 0.0);

    //@cmp.init.block.end
}


// Dll function pointers and dll reload function
#if defined(_WIN64)
    // Define method for reloading dll functions
    void ReloadDllFunctions_user_sp_cpu0_dev0(void) {
        // Load each library and setup function pointers
    }

    void FreeDllFunctions_user_sp_cpu0_dev0(void) {
    }

#else
    // Define method for reloading dll functions
    void ReloadDllFunctions_user_sp_cpu0_dev0(void) {
        // Load each library and setup function pointers
    }

    void FreeDllFunctions_user_sp_cpu0_dev0(void) {
    }
#endif

void load_fmi_libraries_user_sp_cpu0_dev0(void) {
    #if defined(_WIN64)
    #else
    #endif
}


void ReInit_sp_scope_user_sp_cpu0_dev0(){
    // initialise SP Scope buffer pointer
}              
// generated using template: virtual_hil/common_timer_counter_handler.template-------------------------

/*****************************************************************************************/
/**
* This function is the handler which performs processing for the timer counter.
* It is called from an interrupt context such that the amount of processing
* performed should be minimized.  It is called when the timer counter expires
* if interrupts are enabled.
*
*
* @param    None
*
* @return   None
*
* @note     None
*
*****************************************************************************************/

void TimerCounterHandler_0_user_sp_cpu0_dev0() {

#if DEBUG_MODE
    printf("\n\rTimerCounterHandler_0");
#endif

    //////////////////////////////////////////////////////////////////////////
    // Set tunable parameters
    //////////////////////////////////////////////////////////////////////////
             // Generated from the component: Plant.VBR Variable Load1.Control.Constant3
            


             // Generated from the component: Plant.VBR Variable Load1.Control.Constant4
            


             // Generated from the component: Plant.VBR Variable Load1.Control.Constant5
            


             // Generated from the component: Plant.enable_load
            


//////////////////////////////////////////////////////////////////////////
    // Output block
    //////////////////////////////////////////////////////////////////////////
    //@cmp.out.block.start
         // Generated from the component: Plant.P_ref_load
                if (_plant_p_ref_load__state < 0.7) {
            _plant_p_ref_load__out = 0.0;
        } else {
            _plant_p_ref_load__out = 10000.0;
        }

         // Generated from the component: Plant.Q_ref_load
                if (_plant_q_ref_load__state < 0.8) {
            _plant_q_ref_load__out = 0.0;
        } else {
            _plant_q_ref_load__out = 5000.0;
        }

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.Unit Delay1
              _plant_vbr_variable_load1_control_limit_pqref_unit_delay1__out = _plant_vbr_variable_load1_control_limit_pqref_unit_delay1__state;

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.Unit Delay2
              _plant_vbr_variable_load1_control_limit_pqref_unit_delay2__out = _plant_vbr_variable_load1_control_limit_pqref_unit_delay2__state;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.LPF.LPF
                    X_UnInt32 _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i;
          

        _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__a_sum = 0.0f;
        _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__b_sum = 0.0f;
        _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__delay_line_in = 0.0f;
            for (_plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i = 0; _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i < 2; _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i++){
                     _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__b_sum += _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__b_coeff[_plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i] * _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__states[_plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i+0];
            }
        _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__out = _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__b_sum;


         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Integrator1
                 

        _plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator1__out = _plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator1__state;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Integrator2
                 

        _plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator2__out = _plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator2__state;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.Unit Delay1
              _plant_vbr_variable_load1_control_three_phase_pll2_unit_delay1__out = _plant_vbr_variable_load1_control_three_phase_pll2_unit_delay1__state;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.abc to dq.LPF_d
                

        _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__previous_filtered_value = _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__filtered_value;
            _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__filtered_value = _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__previous_in * (1 * 62.83185307 * 5e-05) + _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__previous_filtered_value * (1 - 1 * 62.83185307 * 5e-05 );
        _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__out = _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__filtered_value;


         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.abc to dq.LPF_q
                

        _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__previous_filtered_value = _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__filtered_value;
            _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__filtered_value = _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__previous_in * (1 * 62.83185307 * 5e-05) + _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__previous_filtered_value * (1 - 1 * 62.83185307 * 5e-05 );
        _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__out = _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__filtered_value;


         // Generated from the component: Plant.VBR Variable Load1.Ia.Ia1
            _plant_vbr_variable_load1_ia_ia1__out = (HIL_InFloat(0xc80000+0x18));

         // Generated from the component: Plant.VBR Variable Load1.Ib.Ia1
            _plant_vbr_variable_load1_ib_ia1__out = (HIL_InFloat(0xc80000+0x19));

         // Generated from the component: Plant.VBR Variable Load1.Ic.Ia1
            _plant_vbr_variable_load1_ic_ia1__out = (HIL_InFloat(0xc80000+0x1a));

         // Generated from the component: Plant.VBR Variable Load1.Va.Va1
            _plant_vbr_variable_load1_va_va1__out = (HIL_InFloat(0xc80000+0xd));

         // Generated from the component: Plant.VBR Variable Load1.Vb.Va1
            _plant_vbr_variable_load1_vb_va1__out = (HIL_InFloat(0xc80000+0xe));

         // Generated from the component: Plant.VBR Variable Load1.Vc.Va1
            _plant_vbr_variable_load1_vc_va1__out = (HIL_InFloat(0xc80000+0xf));

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.to_Hz
                    _plant_vbr_variable_load1_control_three_phase_pll2_to_hz__out = 0.15915494309189535 * _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.Gain1
                    _plant_vbr_variable_load1_control_gain1__out = 0.0030618621784789728 * _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.Gain2
                    _plant_vbr_variable_load1_control_gain2__out = 0.0030618621784789728 * _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.normalize
                    _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in1 = _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__out;
            _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in2 = _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__out;

    {
    _plant_vbr_variable_load1_control_three_phase_pll2_normalize__pk = ( powf ( _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in1 , 2.0 ) + powf ( _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in2 , 2.0 ) ) ; _plant_vbr_variable_load1_control_three_phase_pll2_normalize__pk = sqrt ( _plant_vbr_variable_load1_control_three_phase_pll2_normalize__pk ) ; if ( _plant_vbr_variable_load1_control_three_phase_pll2_normalize__pk < 0.1 )     {
        _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in2_pu = _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in2 / 0.1 ;
}
 else     {
        _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in2_pu = _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in2 / _plant_vbr_variable_load1_control_three_phase_pll2_normalize__pk ;
}

}

         // Generated from the component: Plant.VBR Variable Load1.Control.abc to dq1.abc to alpha beta
        	_plant_vbr_variable_load1_control_abc_to_dq1_abc_to_alpha_beta__alpha = (2.0*_plant_vbr_variable_load1_ia_ia1__out - _plant_vbr_variable_load1_ib_ia1__out - _plant_vbr_variable_load1_ic_ia1__out)*0.3333333333333333;
	_plant_vbr_variable_load1_control_abc_to_dq1_abc_to_alpha_beta__beta = (_plant_vbr_variable_load1_ib_ia1__out - _plant_vbr_variable_load1_ic_ia1__out)*0.5773502691896258;
	_plant_vbr_variable_load1_control_abc_to_dq1_abc_to_alpha_beta__gamma = (_plant_vbr_variable_load1_ia_ia1__out + _plant_vbr_variable_load1_ib_ia1__out + _plant_vbr_variable_load1_ic_ia1__out)*0.3333333333333333;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.abc to dq.abc to alpha beta
        	_plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_abc_to_alpha_beta__alpha = (2.0*_plant_vbr_variable_load1_va_va1__out - _plant_vbr_variable_load1_vb_va1__out - _plant_vbr_variable_load1_vc_va1__out)*0.3333333333333333;
	_plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_abc_to_alpha_beta__beta = (_plant_vbr_variable_load1_vb_va1__out - _plant_vbr_variable_load1_vc_va1__out)*0.5773502691896258;
	_plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_abc_to_alpha_beta__gamma = (_plant_vbr_variable_load1_va_va1__out + _plant_vbr_variable_load1_vb_va1__out + _plant_vbr_variable_load1_vc_va1__out)*0.3333333333333333;

         // Generated from the component: Plant.VBR Variable Load1.Power Meter1
            _plant_vbr_variable_load1_power_meter1__v_alpha = SQRT_2OVER3*( _plant_vbr_variable_load1_va_va1__out - 0.5f* _plant_vbr_variable_load1_vb_va1__out - 0.5f* _plant_vbr_variable_load1_vc_va1__out);
    _plant_vbr_variable_load1_power_meter1__v_beta = SQRT_2OVER3*(SQRT3_OVER_2* _plant_vbr_variable_load1_vb_va1__out - SQRT3_OVER_2* _plant_vbr_variable_load1_vc_va1__out);
    _plant_vbr_variable_load1_power_meter1__i_alpha = SQRT_2OVER3*( _plant_vbr_variable_load1_ia_ia1__out - 0.5f* _plant_vbr_variable_load1_ib_ia1__out - 0.5f* _plant_vbr_variable_load1_ic_ia1__out);
    _plant_vbr_variable_load1_power_meter1__i_beta = SQRT_2OVER3*(SQRT3_OVER_2* _plant_vbr_variable_load1_ib_ia1__out - SQRT3_OVER_2* _plant_vbr_variable_load1_ic_ia1__out);
    _plant_vbr_variable_load1_power_meter1__v_zero = ONE_DIV_BY_SQRT_3*(_plant_vbr_variable_load1_va_va1__out+_plant_vbr_variable_load1_vb_va1__out+_plant_vbr_variable_load1_vc_va1__out);
    _plant_vbr_variable_load1_power_meter1__i_zero = ONE_DIV_BY_SQRT_3*(_plant_vbr_variable_load1_ia_ia1__out+_plant_vbr_variable_load1_ib_ia1__out+_plant_vbr_variable_load1_ic_ia1__out);

    _plant_vbr_variable_load1_power_meter1__Pac = _plant_vbr_variable_load1_power_meter1__v_alpha*_plant_vbr_variable_load1_power_meter1__i_alpha + _plant_vbr_variable_load1_power_meter1__v_beta*_plant_vbr_variable_load1_power_meter1__i_beta;
    _plant_vbr_variable_load1_power_meter1__Qac = _plant_vbr_variable_load1_power_meter1__v_beta*_plant_vbr_variable_load1_power_meter1__i_alpha - _plant_vbr_variable_load1_power_meter1__v_alpha*_plant_vbr_variable_load1_power_meter1__i_beta;
    _plant_vbr_variable_load1_power_meter1__P0ac = _plant_vbr_variable_load1_power_meter1__v_zero*_plant_vbr_variable_load1_power_meter1__i_zero;

    _plant_vbr_variable_load1_power_meter1__filter_1_output = 0.004690286525845449*(_plant_vbr_variable_load1_power_meter1__Pac + _plant_vbr_variable_load1_power_meter1__filter_1_input_k_minus_1) - (-0.9906194269483091)*_plant_vbr_variable_load1_power_meter1__filter_1_output_k_minus_1;
    _plant_vbr_variable_load1_power_meter1__filter_1_outputQ = 0.004690286525845449*(_plant_vbr_variable_load1_power_meter1__Qac + _plant_vbr_variable_load1_power_meter1__filter_1_input_k_minus_1Q) - (-0.9906194269483091)*_plant_vbr_variable_load1_power_meter1__filter_1_output_k_minus_1Q;
    _plant_vbr_variable_load1_power_meter1__filter_1_outputP0 = 0.004690286525845449*(_plant_vbr_variable_load1_power_meter1__P0ac + _plant_vbr_variable_load1_power_meter1__filter_1_input_k_minus_1P0) - (-0.9906194269483091)*_plant_vbr_variable_load1_power_meter1__filter_1_output_k_minus_1P0;

    _plant_vbr_variable_load1_power_meter1__filter_1_input_k_minus_1 = _plant_vbr_variable_load1_power_meter1__Pac;
    _plant_vbr_variable_load1_power_meter1__filter_1_output_k_minus_1 = _plant_vbr_variable_load1_power_meter1__filter_1_output;
    _plant_vbr_variable_load1_power_meter1__filter_1_input_k_minus_1Q = _plant_vbr_variable_load1_power_meter1__Qac;;
    _plant_vbr_variable_load1_power_meter1__filter_1_output_k_minus_1Q = _plant_vbr_variable_load1_power_meter1__filter_1_outputQ;
    _plant_vbr_variable_load1_power_meter1__filter_1_input_k_minus_1P0 = _plant_vbr_variable_load1_power_meter1__P0ac;
    _plant_vbr_variable_load1_power_meter1__filter_1_output_k_minus_1P0 = _plant_vbr_variable_load1_power_meter1__filter_1_outputP0;

        _plant_vbr_variable_load1_power_meter1__Pdc = _plant_vbr_variable_load1_power_meter1__filter_1_output;
        _plant_vbr_variable_load1_power_meter1__Qdc = _plant_vbr_variable_load1_power_meter1__filter_1_outputQ;
        _plant_vbr_variable_load1_power_meter1__P0dc = _plant_vbr_variable_load1_power_meter1__filter_1_outputP0;

    _plant_vbr_variable_load1_power_meter1__apparent = sqrt(pow(_plant_vbr_variable_load1_power_meter1__Pdc,2) + pow(_plant_vbr_variable_load1_power_meter1__Qdc,2));

    if (_plant_vbr_variable_load1_power_meter1__apparent > 0)
        _plant_vbr_variable_load1_power_meter1__k_factor = _plant_vbr_variable_load1_power_meter1__Pdc / _plant_vbr_variable_load1_power_meter1__apparent;
    else
        _plant_vbr_variable_load1_power_meter1__k_factor = 0;


         // Generated from the component: Plant.Bus Join1
        
	        	_plant_bus_join1__out[0] = _plant_enable_load__out;
 	        	_plant_bus_join1__out[1] = _plant_p_ref_load__out;
 	        	_plant_bus_join1__out[2] = _plant_q_ref_load__out;
 
         // Generated from the component: Plant.VBR Variable Load1.Control.Gain3
                    _plant_vbr_variable_load1_control_gain3__out = 0.02 * _plant_vbr_variable_load1_control_three_phase_pll2_to_hz__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.Current_ref.Product4
        _plant_vbr_variable_load1_control_current_ref_product4__out = (_plant_vbr_variable_load1_control_gain1__out * _plant_vbr_variable_load1_control_limit_pqref_unit_delay2__out);

         // Generated from the component: Plant.VBR Variable Load1.Control.Current_ref.Product5
        _plant_vbr_variable_load1_control_current_ref_product5__out = (_plant_vbr_variable_load1_control_limit_pqref_unit_delay1__out * _plant_vbr_variable_load1_control_gain1__out);

         // Generated from the component: Plant.VBR Variable Load1.Control.Current_ref.Product3
        _plant_vbr_variable_load1_control_current_ref_product3__out = (_plant_vbr_variable_load1_control_gain2__out * _plant_vbr_variable_load1_control_limit_pqref_unit_delay1__out);

         // Generated from the component: Plant.VBR Variable Load1.Control.Current_ref.Product6
        _plant_vbr_variable_load1_control_current_ref_product6__out = (_plant_vbr_variable_load1_control_limit_pqref_unit_delay2__out * _plant_vbr_variable_load1_control_gain2__out);

         // Generated from the component: Plant.VBR Variable Load1.Control.Gain12
                    _plant_vbr_variable_load1_control_gain12__out = 0.0030618621784789728 * _plant_vbr_variable_load1_control_three_phase_pll2_normalize__pk;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Kd
                    _plant_vbr_variable_load1_control_three_phase_pll2_pid_kd__out = 1.0 * _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in2_pu;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Ki
                    _plant_vbr_variable_load1_control_three_phase_pll2_pid_ki__out = 3200.0 * _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in2_pu;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Kp
                    _plant_vbr_variable_load1_control_three_phase_pll2_pid_kp__out = 100.0 * _plant_vbr_variable_load1_control_three_phase_pll2_normalize__in2_pu;

         // Generated from the component: Plant.VBR Variable Load1.Control.Termination1
        

         // Generated from the component: Plant.VBR Variable Load1.Control.abc to dq1.alpha beta to dq
                _plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__k1 = cos(_plant_vbr_variable_load1_control_three_phase_pll2_unit_delay1__out);
        _plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__k2 = sin(_plant_vbr_variable_load1_control_three_phase_pll2_unit_delay1__out);

	_plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__d = _plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__k2*_plant_vbr_variable_load1_control_abc_to_dq1_abc_to_alpha_beta__alpha - _plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__k1*_plant_vbr_variable_load1_control_abc_to_dq1_abc_to_alpha_beta__beta;
	_plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__q = _plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__k1*_plant_vbr_variable_load1_control_abc_to_dq1_abc_to_alpha_beta__alpha + _plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__k2*_plant_vbr_variable_load1_control_abc_to_dq1_abc_to_alpha_beta__beta;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.abc to dq.alpha beta to dq
                _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__k1 = cos(_plant_vbr_variable_load1_control_three_phase_pll2_unit_delay1__out);
        _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__k2 = sin(_plant_vbr_variable_load1_control_three_phase_pll2_unit_delay1__out);

	_plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__d = _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__k2*_plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_abc_to_alpha_beta__alpha - _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__k1*_plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_abc_to_alpha_beta__beta;
	_plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__q = _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__k1*_plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_abc_to_alpha_beta__alpha + _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__k2*_plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_abc_to_alpha_beta__beta;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.term_zero
        

         // Generated from the component: Plant.VBR Variable Load1.Bus Join2
        
	        	_plant_vbr_variable_load1_bus_join2__out[0] = _plant_vbr_variable_load1_power_meter1__Pdc;
 	        	_plant_vbr_variable_load1_bus_join2__out[1] = _plant_vbr_variable_load1_power_meter1__Qdc;
 	        	_plant_vbr_variable_load1_bus_join2__out[2] = _plant_vbr_variable_load1_power_meter1__apparent;
 	        	_plant_vbr_variable_load1_bus_join2__out[3] = _plant_vbr_variable_load1_power_meter1__k_factor;
 
         // Generated from the component: Plant.VBR Variable Load1.P
        

    HIL_OutAO(0x4002, (float)_plant_vbr_variable_load1_power_meter1__Pdc);

         // Generated from the component: Plant.VBR Variable Load1.Q
        

    HIL_OutAO(0x4003, (float)_plant_vbr_variable_load1_power_meter1__Qdc);

         // Generated from the component: Plant.VBR Variable Load1.S
        

    HIL_OutAO(0x4004, (float)_plant_vbr_variable_load1_power_meter1__apparent);

         // Generated from the component: Plant.VBR Variable Load1.Termination1
        

         // Generated from the component: Plant.VBR Variable Load1.Termination2
        

         // Generated from the component: Plant.VBR Variable Load1.pf
        

    HIL_OutAO(0x4005, (float)_plant_vbr_variable_load1_power_meter1__k_factor);

         // Generated from the component: Plant.VBR Variable Load1.Subsystem1.Bus Split1
                     _plant_vbr_variable_load1_subsystem1_bus_split1__out=_plant_bus_join1__out[0];
 
            _plant_vbr_variable_load1_subsystem1_bus_split1__out1=_plant_bus_join1__out[1];
 
            _plant_vbr_variable_load1_subsystem1_bus_split1__out2=_plant_bus_join1__out[2];
 

         // Generated from the component: Plant.VBR Variable Load1.Control.Current_ref.Sum3
        _plant_vbr_variable_load1_control_current_ref_sum3__out = _plant_vbr_variable_load1_control_current_ref_product3__out-_plant_vbr_variable_load1_control_current_ref_product4__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.Current_ref.Sum4
        _plant_vbr_variable_load1_control_current_ref_sum4__out = _plant_vbr_variable_load1_control_current_ref_product5__out+_plant_vbr_variable_load1_control_current_ref_product6__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.Current_ref.Product7
        _plant_vbr_variable_load1_control_current_ref_product7__out = (_plant_vbr_variable_load1_control_gain12__out * _plant_vbr_variable_load1_control_gain12__out);

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Sum8
        _plant_vbr_variable_load1_control_three_phase_pll2_pid_sum8__out = _plant_vbr_variable_load1_control_three_phase_pll2_pid_kd__out-_plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator2__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.Gain4
                    _plant_vbr_variable_load1_control_gain4__out = 0.024494897427831782 * _plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__d;

         // Generated from the component: Plant.VBR Variable Load1.Control.Gain5
                    _plant_vbr_variable_load1_control_gain5__out = 0.024494897427831782 * _plant_vbr_variable_load1_control_abc_to_dq1_alpha_beta_to_dq__q;

         // Generated from the component: Plant.Bus Split2
                     _plant_bus_split2__out=_plant_vbr_variable_load1_bus_join2__out[0];
 
            _plant_bus_split2__out1=_plant_vbr_variable_load1_bus_join2__out[1];
 
            _plant_bus_split2__out2=_plant_vbr_variable_load1_bus_join2__out[2];
 
            _plant_bus_split2__out3=_plant_vbr_variable_load1_bus_join2__out[3];
 

         // Generated from the component: Plant.VBR Variable Load1.Control.Signal switch1
                         _plant_vbr_variable_load1_control_signal_switch1__out = (_plant_vbr_variable_load1_subsystem1_bus_split1__out > 0.5f) ? _plant_vbr_variable_load1_subsystem1_bus_split1__out1 : _plant_vbr_variable_load1_control_constant5__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.Signal switch2
                         _plant_vbr_variable_load1_control_signal_switch2__out = (_plant_vbr_variable_load1_subsystem1_bus_split1__out > 0.5f) ? _plant_vbr_variable_load1_subsystem1_bus_split1__out2 : _plant_vbr_variable_load1_control_constant5__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_d.Integrator1
                 

if (((_plant_vbr_variable_load1_subsystem1_bus_split1__out > 0.0) && (_plant_vbr_variable_load1_control_current_control_pi_d_integrator1__reset_state <= 0)) || ((_plant_vbr_variable_load1_subsystem1_bus_split1__out <= 0.0) && (_plant_vbr_variable_load1_control_current_control_pi_d_integrator1__reset_state == 1))) {_plant_vbr_variable_load1_control_current_control_pi_d_integrator1__state = 0.0;
                }        _plant_vbr_variable_load1_control_current_control_pi_d_integrator1__out = _plant_vbr_variable_load1_control_current_control_pi_d_integrator1__state;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_q.Integrator1
                 

if (((_plant_vbr_variable_load1_subsystem1_bus_split1__out > 0.0) && (_plant_vbr_variable_load1_control_current_control_pi_q_integrator1__reset_state <= 0)) || ((_plant_vbr_variable_load1_subsystem1_bus_split1__out <= 0.0) && (_plant_vbr_variable_load1_control_current_control_pi_q_integrator1__reset_state == 1))) {_plant_vbr_variable_load1_control_current_control_pi_q_integrator1__state = 0.0;
                }        _plant_vbr_variable_load1_control_current_control_pi_q_integrator1__out = _plant_vbr_variable_load1_control_current_control_pi_q_integrator1__state;

         // Generated from the component: Plant.VBR Variable Load1.enable_probe
                HIL_OutInt32(0xf00400, _plant_vbr_variable_load1_subsystem1_bus_split1__out != 0x0);

         // Generated from the component: Plant.VBR Variable Load1.Control.Current_ref.Limit3
        _plant_vbr_variable_load1_control_current_ref_limit3__out = MAX(_plant_vbr_variable_load1_control_current_ref_product7__out, 0.01);
         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Gain1
                    _plant_vbr_variable_load1_control_three_phase_pll2_pid_gain1__out = 714.2857 * _plant_vbr_variable_load1_control_three_phase_pll2_pid_sum8__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Product2
        _plant_vbr_variable_load1_control_current_control_product2__out = (_plant_vbr_variable_load1_control_gain4__out * _plant_vbr_variable_load1_control_gain3__out);

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Product1
        _plant_vbr_variable_load1_control_current_control_product1__out = (_plant_vbr_variable_load1_control_gain5__out * _plant_vbr_variable_load1_control_gain3__out);

         // Generated from the component: Plant.p_load
        

    HIL_OutAO(0x4006, (float)_plant_bus_split2__out);

         // Generated from the component: Plant.q_load
        

    HIL_OutAO(0x4007, (float)_plant_bus_split2__out1);

         // Generated from the component: Plant.VBR Variable Load1.Control.Gain8
                    _plant_vbr_variable_load1_control_gain8__out = 5e-05 * _plant_vbr_variable_load1_control_signal_switch1__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.Gain9
                    _plant_vbr_variable_load1_control_gain9__out = 5e-05 * _plant_vbr_variable_load1_control_signal_switch2__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.Current_ref.Product1
        _plant_vbr_variable_load1_control_current_ref_product1__out = (_plant_vbr_variable_load1_control_current_ref_sum3__out)*1.0/(_plant_vbr_variable_load1_control_current_ref_limit3__out);

         // Generated from the component: Plant.VBR Variable Load1.Control.Current_ref.Product2
        _plant_vbr_variable_load1_control_current_ref_product2__out = (_plant_vbr_variable_load1_control_current_ref_sum4__out)*1.0/(_plant_vbr_variable_load1_control_current_ref_limit3__out);

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Sum5
        _plant_vbr_variable_load1_control_three_phase_pll2_pid_sum5__out = _plant_vbr_variable_load1_control_three_phase_pll2_pid_kp__out+_plant_vbr_variable_load1_control_three_phase_pll2_pid_gain1__out+_plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator1__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Gain11
                    _plant_vbr_variable_load1_control_current_control_gain11__out = 0.003926990816987242 * _plant_vbr_variable_load1_control_current_control_product2__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Gain8
                    _plant_vbr_variable_load1_control_current_control_gain8__out = 0.003926990816987242 * _plant_vbr_variable_load1_control_current_control_product1__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.priority_PQlim.PQ limiting with priority
                    _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Pref = _plant_vbr_variable_load1_control_gain8__out;
            _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Qref = _plant_vbr_variable_load1_control_gain9__out;
            _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax = _plant_vbr_variable_load1_control_constant3__out;

    {
    _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Sref = sqrt ( _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Pref * _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Pref + _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Qref * _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Qref ) ; if ( _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Qref >= 0 ) _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__signQ = 1 ; else _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__signQ = - 1 ; if ( _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Pref >= 0 ) _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__signP = 1 ; else _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__signP = - 1 ; if ( _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Sref <= _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax )     {
        _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__S = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Sref ; _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Pref ; _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Qref ;
}
 else     {
        _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__S = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax ; if ( 1.0 == 1 )         {
            if ( fabs ( _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Pref ) > _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax )             {
                _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__signP * _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax ; _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q = 0 ;
}
 else             {
                _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Pref ; _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__signQ * sqrt ( _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax * _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax - _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Pref * _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Pref ) ;
}

}
 else if ( 1.0 == 2 )         {
            if ( fabs ( _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Qref ) > _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax )             {
                _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__signQ * _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax ; _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P = 0 ;
}
 else             {
                _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Qref ; _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__signP * sqrt ( _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax * _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax - _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Qref * _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Qref ) ;
}

}
 else         {
            _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P = ( _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Pref / _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Sref ) * _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax ; _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q = ( _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Qref / _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Sref ) * _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Smax ;
}

}

}

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Sum4
        _plant_vbr_variable_load1_control_current_control_sum4__out = _plant_vbr_variable_load1_control_current_ref_product1__out-_plant_vbr_variable_load1_control_gain5__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Sum2
        _plant_vbr_variable_load1_control_current_control_sum2__out = _plant_vbr_variable_load1_control_current_ref_product2__out-_plant_vbr_variable_load1_control_gain4__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Limit1
              _plant_vbr_variable_load1_control_three_phase_pll2_pid_limit1__out = MIN(MAX(_plant_vbr_variable_load1_control_three_phase_pll2_pid_sum5__out, -10000.0), 10000.0);

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.P rate limit
              

_plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__rising_rate_lim[0] = 50.0 * 5e-05;
_plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__falling_rate_lim[0] = -50.0 * 5e-05;
        if (_plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__first_step) {
            _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__out = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P;
            _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__state = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P;
        } else {
            _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__out = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P;if (_plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P - _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__state > _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__rising_rate_lim[0])
                        _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__out = _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__state + (_plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__rising_rate_lim[0]);
if (_plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P - _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__state < _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__falling_rate_lim[0])
                        _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__out = _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__state + (_plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__falling_rate_lim[0]);
        }

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.Q rate limit
              

_plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__rising_rate_lim[0] = 50.0 * 5e-05;
_plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__falling_rate_lim[0] = -50.0 * 5e-05;
        if (_plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__first_step) {
            _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__out = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q;
            _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__state = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q;
        } else {
            _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__out = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q;if (_plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q - _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__state > _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__rising_rate_lim[0])
                        _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__out = _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__state + (_plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__rising_rate_lim[0]);
if (_plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q - _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__state < _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__falling_rate_lim[0])
                        _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__out = _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__state + (_plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__falling_rate_lim[0]);
        }

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.S rate limit
              

_plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__rising_rate_lim[0] = 50.0 * 5e-05;
_plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__falling_rate_lim[0] = -50.0 * 5e-05;
        if (_plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__first_step) {
            _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__out = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__S;
            _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__state = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__S;
        } else {
            _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__out = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__S;if (_plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__S - _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__state > _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__rising_rate_lim[0])
                        _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__out = _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__state + (_plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__rising_rate_lim[0]);
if (_plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__S - _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__state < _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__falling_rate_lim[0])
                        _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__out = _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__state + (_plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__falling_rate_lim[0]);
        }

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_q.Ki
                    _plant_vbr_variable_load1_control_current_control_pi_q_ki__out = 30.0 * _plant_vbr_variable_load1_control_current_control_sum4__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_q.Kp
                    _plant_vbr_variable_load1_control_current_control_pi_q_kp__out = 0.003 * _plant_vbr_variable_load1_control_current_control_sum4__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_d.Ki
                    _plant_vbr_variable_load1_control_current_control_pi_d_ki__out = 30.0 * _plant_vbr_variable_load1_control_current_control_sum2__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_d.Kp
                    _plant_vbr_variable_load1_control_current_control_pi_d_kp__out = 0.003 * _plant_vbr_variable_load1_control_current_control_sum2__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Sum6
        _plant_vbr_variable_load1_control_three_phase_pll2_pid_sum6__out =  - _plant_vbr_variable_load1_control_three_phase_pll2_pid_sum5__out+_plant_vbr_variable_load1_control_three_phase_pll2_pid_limit1__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.Rate Limiter1
              

_plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__rising_rate_lim[0] = 75.39822368615503 * 5e-05;
_plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__falling_rate_lim[0] = -75.39822368615503 * 5e-05;
        if (_plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__first_step) {
            _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__out = _plant_vbr_variable_load1_control_three_phase_pll2_pid_limit1__out;
            _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__state = _plant_vbr_variable_load1_control_three_phase_pll2_pid_limit1__out;
        } else {
            _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__out = _plant_vbr_variable_load1_control_three_phase_pll2_pid_limit1__out;if (_plant_vbr_variable_load1_control_three_phase_pll2_pid_limit1__out - _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__state > _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__rising_rate_lim[0])
                        _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__out = _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__state + (_plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__rising_rate_lim[0]);
if (_plant_vbr_variable_load1_control_three_phase_pll2_pid_limit1__out - _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__state < _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__falling_rate_lim[0])
                        _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__out = _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__state + (_plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__falling_rate_lim[0]);
        }

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.integrator
                    _plant_vbr_variable_load1_control_three_phase_pll2_integrator__in = _plant_vbr_variable_load1_control_three_phase_pll2_pid_limit1__out;

    {
    _plant_vbr_variable_load1_control_three_phase_pll2_integrator__state += 5e-05 * _plant_vbr_variable_load1_control_three_phase_pll2_integrator__in ; if ( _plant_vbr_variable_load1_control_three_phase_pll2_integrator__in >= 0.0 )     {
        if ( _plant_vbr_variable_load1_control_three_phase_pll2_integrator__state >= 6.283185307179586 )         {
            _plant_vbr_variable_load1_control_three_phase_pll2_integrator__state -= 6.283185307179586 ;
}

}
 else     {
        if ( _plant_vbr_variable_load1_control_three_phase_pll2_integrator__state <= - 6.283185307179586 )         {
            _plant_vbr_variable_load1_control_three_phase_pll2_integrator__state += 6.283185307179586 ;
}

}
 _plant_vbr_variable_load1_control_three_phase_pll2_integrator__out = _plant_vbr_variable_load1_control_three_phase_pll2_integrator__state ;
}

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.limS_overPQ.S limiting over PQ
                    _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Pref = _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__out;
            _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Qref = _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__out;
            _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Sref = _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__out;

    {
    _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__S_PQref = sqrt ( _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Pref * _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Pref + _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Qref * _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Qref ) ; if ( _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__S_PQref > _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Sref )     {
        _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__P = ( _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Pref / _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__S_PQref ) * _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Sref ; _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Q = ( _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Qref / _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__S_PQref ) * _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Sref ;
}
 else     {
        _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__P = _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Pref ; _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Q = _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Qref ;
}

}

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_q.Sum5
        _plant_vbr_variable_load1_control_current_control_pi_q_sum5__out = _plant_vbr_variable_load1_control_current_control_pi_q_kp__out+_plant_vbr_variable_load1_control_current_control_pi_q_integrator1__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_d.Sum5
        _plant_vbr_variable_load1_control_current_control_pi_d_sum5__out = _plant_vbr_variable_load1_control_current_control_pi_d_kp__out+_plant_vbr_variable_load1_control_current_control_pi_d_integrator1__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Kb
                    _plant_vbr_variable_load1_control_three_phase_pll2_pid_kb__out = 1.0 * _plant_vbr_variable_load1_control_three_phase_pll2_pid_sum6__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_q.Limit1
              _plant_vbr_variable_load1_control_current_control_pi_q_limit1__out = MIN(MAX(_plant_vbr_variable_load1_control_current_control_pi_q_sum5__out, -100000.0), 100000.0);

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_d.Limit1
              _plant_vbr_variable_load1_control_current_control_pi_d_limit1__out = MIN(MAX(_plant_vbr_variable_load1_control_current_control_pi_d_sum5__out, -100000.0), 100000.0);

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Sum7
        _plant_vbr_variable_load1_control_three_phase_pll2_pid_sum7__out = _plant_vbr_variable_load1_control_three_phase_pll2_pid_ki__out+_plant_vbr_variable_load1_control_three_phase_pll2_pid_kb__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Gain10
                    _plant_vbr_variable_load1_control_current_control_gain10__out = 0.9999922893418345 * _plant_vbr_variable_load1_control_current_control_pi_q_limit1__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_q.Sum6
        _plant_vbr_variable_load1_control_current_control_pi_q_sum6__out =  - _plant_vbr_variable_load1_control_current_control_pi_q_sum5__out+_plant_vbr_variable_load1_control_current_control_pi_q_limit1__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Gain9
                    _plant_vbr_variable_load1_control_current_control_gain9__out = 0.9999922893418345 * _plant_vbr_variable_load1_control_current_control_pi_d_limit1__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_d.Sum6
        _plant_vbr_variable_load1_control_current_control_pi_d_sum6__out =  - _plant_vbr_variable_load1_control_current_control_pi_d_sum5__out+_plant_vbr_variable_load1_control_current_control_pi_d_limit1__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Sum6
        _plant_vbr_variable_load1_control_current_control_sum6__out = _plant_vbr_variable_load1_control_gain2__out-_plant_vbr_variable_load1_control_current_control_gain10__out-_plant_vbr_variable_load1_control_current_control_gain11__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_q.Kb
                    _plant_vbr_variable_load1_control_current_control_pi_q_kb__out = 1.0 * _plant_vbr_variable_load1_control_current_control_pi_q_sum6__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Sum1
        _plant_vbr_variable_load1_control_current_control_sum1__out = _plant_vbr_variable_load1_control_gain1__out-_plant_vbr_variable_load1_control_current_control_gain9__out+_plant_vbr_variable_load1_control_current_control_gain8__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_d.Kb
                    _plant_vbr_variable_load1_control_current_control_pi_d_kb__out = 1.0 * _plant_vbr_variable_load1_control_current_control_pi_d_sum6__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Limit2
              _plant_vbr_variable_load1_control_current_control_limit2__out = MIN(MAX(_plant_vbr_variable_load1_control_current_control_sum6__out, -3.0), 3.0);

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_q.Sum7
        _plant_vbr_variable_load1_control_current_control_pi_q_sum7__out = _plant_vbr_variable_load1_control_current_control_pi_q_ki__out+_plant_vbr_variable_load1_control_current_control_pi_q_kb__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Limit1
              _plant_vbr_variable_load1_control_current_control_limit1__out = MIN(MAX(_plant_vbr_variable_load1_control_current_control_sum1__out, -3.0), 3.0);

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_d.Sum7
        _plant_vbr_variable_load1_control_current_control_pi_d_sum7__out = _plant_vbr_variable_load1_control_current_control_pi_d_ki__out+_plant_vbr_variable_load1_control_current_control_pi_d_kb__out;    

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Gain13
                    _plant_vbr_variable_load1_control_current_control_gain13__out = 326.5986323710904 * _plant_vbr_variable_load1_control_current_control_limit2__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.Gain12
                    _plant_vbr_variable_load1_control_current_control_gain12__out = 326.5986323710904 * _plant_vbr_variable_load1_control_current_control_limit1__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.dq to abc1.dq to alpha beta
                _plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__k1 = cos(_plant_vbr_variable_load1_control_three_phase_pll2_unit_delay1__out);
        _plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__k2 = sin(_plant_vbr_variable_load1_control_three_phase_pll2_unit_delay1__out);

	_plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__alpha = _plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__k2*_plant_vbr_variable_load1_control_current_control_gain12__out + _plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__k1*_plant_vbr_variable_load1_control_current_control_gain13__out;
	_plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__beta = _plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__k2*_plant_vbr_variable_load1_control_current_control_gain13__out - _plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__k1*_plant_vbr_variable_load1_control_current_control_gain12__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.dq to abc1.alpha beta to abc
        	_plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__A = 1*_plant_vbr_variable_load1_control_constant4__out;
	_plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__B = _plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__A - 0.5*_plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__alpha;
	_plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__C = _plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__B - 0.8660254037844386*_plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__beta;
	_plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__B += 0.8660254037844386*_plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__beta;
	_plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__A += 1*_plant_vbr_variable_load1_control_dq_to_abc1_dq_to_alpha_beta__alpha;

         // Generated from the component: Plant.VBR Variable Load1.Vi_a.Vs1
        
HIL_OutFloat(137101312, (float) _plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__A);

         // Generated from the component: Plant.VBR Variable Load1.Vi_b.Vs1
        
HIL_OutFloat(137101313, (float) _plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__B);

         // Generated from the component: Plant.VBR Variable Load1.Vi_c.Vs1
        
HIL_OutFloat(137101314, (float) _plant_vbr_variable_load1_control_dq_to_abc1_alpha_beta_to_abc__C);

//@cmp.out.block.end


    //////////////////////////////////////////////////////////////////////////
    // Update block
    //////////////////////////////////////////////////////////////////////////
    //@cmp.update.block.start
         // Generated from the component: Plant.P_ref_load
            if (_plant_p_ref_load__state <= 0.7)
        _plant_p_ref_load__state += 5e-05;

         // Generated from the component: Plant.Q_ref_load
            if (_plant_q_ref_load__state <= 0.8)
        _plant_q_ref_load__state += 5e-05;

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.Unit Delay1
              _plant_vbr_variable_load1_control_limit_pqref_unit_delay1__state = _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__P;

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.Unit Delay2
              _plant_vbr_variable_load1_control_limit_pqref_unit_delay2__state = _plant_vbr_variable_load1_control_limit_pqref_lims_overpq_s_limiting_over_pq__Q;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.LPF.LPF
                  
            for (_plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i = 1; _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i > 0; _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i--){
        _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__a_sum += _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__a_coeff[_plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i+1] * _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__states[_plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i];
    }
        _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__a_sum += _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__states[0] * _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__a_coeff[1];
        _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__delay_line_in = _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__out - _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__a_sum;


            for (_plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i = 1; _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i > 0; _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i--){
                _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__states[_plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i] = _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__states[_plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__i-1];
            }
            _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__states[0] = _plant_vbr_variable_load1_control_three_phase_pll2_lpf_lpf__delay_line_in;


         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Integrator1
                 _plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator1__state += _plant_vbr_variable_load1_control_three_phase_pll2_pid_sum7__out * 5e-05;



         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.PID.Integrator2
                 _plant_vbr_variable_load1_control_three_phase_pll2_pid_integrator2__state += _plant_vbr_variable_load1_control_three_phase_pll2_pid_gain1__out * 5e-05;



         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.Unit Delay1
              _plant_vbr_variable_load1_control_three_phase_pll2_unit_delay1__state = _plant_vbr_variable_load1_control_three_phase_pll2_integrator__out;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.abc to dq.LPF_d
                

        _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_d__previous_in = _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__d;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.abc to dq.LPF_q
                

        _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_lpf_q__previous_in = _plant_vbr_variable_load1_control_three_phase_pll2_abc_to_dq_alpha_beta_to_dq__q;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.normalize
        
    {
}

         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_d.Integrator1
                 _plant_vbr_variable_load1_control_current_control_pi_d_integrator1__state += _plant_vbr_variable_load1_control_current_control_pi_d_sum7__out * 5e-05;


            if (_plant_vbr_variable_load1_subsystem1_bus_split1__out > 0)
                _plant_vbr_variable_load1_control_current_control_pi_d_integrator1__reset_state = 1;
            else if (_plant_vbr_variable_load1_subsystem1_bus_split1__out < 0)
                _plant_vbr_variable_load1_control_current_control_pi_d_integrator1__reset_state = -1;
            else
                _plant_vbr_variable_load1_control_current_control_pi_d_integrator1__reset_state = 0;


         // Generated from the component: Plant.VBR Variable Load1.Control.current_control.PI_q.Integrator1
                 _plant_vbr_variable_load1_control_current_control_pi_q_integrator1__state += _plant_vbr_variable_load1_control_current_control_pi_q_sum7__out * 5e-05;


            if (_plant_vbr_variable_load1_subsystem1_bus_split1__out > 0)
                _plant_vbr_variable_load1_control_current_control_pi_q_integrator1__reset_state = 1;
            else if (_plant_vbr_variable_load1_subsystem1_bus_split1__out < 0)
                _plant_vbr_variable_load1_control_current_control_pi_q_integrator1__reset_state = -1;
            else
                _plant_vbr_variable_load1_control_current_control_pi_q_integrator1__reset_state = 0;


         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.priority_PQlim.PQ limiting with priority
        
    {
}

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.P rate limit
              

_plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__rising_rate_lim[0] = 50.0 * 5e-05;
_plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__falling_rate_lim[0] = -50.0 * 5e-05;


if (_plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P - _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__state > _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__rising_rate_lim[0])
                    _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__state += _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__rising_rate_lim[0];
else  if (_plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P - _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__state < _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__falling_rate_lim[0])
                    _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__state += (_plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__falling_rate_lim[0]);
else
                    _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__state = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__P;

    _plant_vbr_variable_load1_control_limit_pqref_p_rate_limit__first_step = 0;

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.Q rate limit
              

_plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__rising_rate_lim[0] = 50.0 * 5e-05;
_plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__falling_rate_lim[0] = -50.0 * 5e-05;


if (_plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q - _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__state > _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__rising_rate_lim[0])
                    _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__state += _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__rising_rate_lim[0];
else  if (_plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q - _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__state < _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__falling_rate_lim[0])
                    _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__state += (_plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__falling_rate_lim[0]);
else
                    _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__state = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__Q;

    _plant_vbr_variable_load1_control_limit_pqref_q_rate_limit__first_step = 0;

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.S rate limit
              

_plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__rising_rate_lim[0] = 50.0 * 5e-05;
_plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__falling_rate_lim[0] = -50.0 * 5e-05;


if (_plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__S - _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__state > _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__rising_rate_lim[0])
                    _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__state += _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__rising_rate_lim[0];
else  if (_plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__S - _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__state < _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__falling_rate_lim[0])
                    _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__state += (_plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__falling_rate_lim[0]);
else
                    _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__state = _plant_vbr_variable_load1_control_limit_pqref_priority_pqlim_pq_limiting_with_priority__S;

    _plant_vbr_variable_load1_control_limit_pqref_s_rate_limit__first_step = 0;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.Rate Limiter1
              

_plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__rising_rate_lim[0] = 75.39822368615503 * 5e-05;
_plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__falling_rate_lim[0] = -75.39822368615503 * 5e-05;


if (_plant_vbr_variable_load1_control_three_phase_pll2_pid_limit1__out - _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__state > _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__rising_rate_lim[0])
                    _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__state += _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__rising_rate_lim[0];
else  if (_plant_vbr_variable_load1_control_three_phase_pll2_pid_limit1__out - _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__state < _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__falling_rate_lim[0])
                    _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__state += (_plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__falling_rate_lim[0]);
else
                    _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__state = _plant_vbr_variable_load1_control_three_phase_pll2_pid_limit1__out;

    _plant_vbr_variable_load1_control_three_phase_pll2_rate_limiter1__first_step = 0;

         // Generated from the component: Plant.VBR Variable Load1.Control.Three phase PLL2.integrator
        
    {
}

         // Generated from the component: Plant.VBR Variable Load1.Control.Limit_PQref.limS_overPQ.S limiting over PQ
        
    {
}

    //@cmp.update.block.end
}
// ----------------------------------------------------------------------------------------
  //-----------------------------------------------------------------------------------------