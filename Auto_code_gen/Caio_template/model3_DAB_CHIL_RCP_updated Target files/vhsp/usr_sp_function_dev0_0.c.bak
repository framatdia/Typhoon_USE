// generated using template: cop_main.template---------------------------------------------
/******************************************************************************************
**
**  Module Name: cop_main.c
**  NOTE: Automatically generated file. DO NOT MODIFY!
**  Description:
**            Main file
**
******************************************************************************************/
// generated using template: arm/custom_include.template-----------------------------------


#ifdef __cplusplus
#include <limits>

extern "C" {
#endif

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <stdint.h>
#include <complex.h>

// x86 libraries:
#include "../include/sp_functions_dev0.h"


#ifdef __cplusplus
}
#endif


















// ----------------------------------------------------------------------------------------                // generated using template:generic_macros.template-----------------------------------------
/*********************** Macros (Inline Functions) Definitions ***************************/

// ----------------------------------------------------------------------------------------

#ifndef MAX
#define MAX(value, limit) (((value) > (limit)) ? (value) : (limit))
#endif
#ifndef MIN
#define MIN(value, limit) (((value) < (limit)) ? (value) : (limit))
#endif

// generated using template: VirtualHIL/custom_defines.template----------------------------

typedef unsigned char X_UnInt8;
typedef char X_Int8;
typedef signed short X_Int16;
typedef unsigned short X_UnInt16;
typedef int X_Int32;
typedef unsigned int X_UnInt32;
typedef unsigned int uint;
typedef double real;

// ----------------------------------------------------------------------------------------                
// generated using template: custom_consts.template----------------------------------------

// arithmetic constants
#define C_SQRT_2                    1.4142135623730950488016887242097f
#define C_SQRT_3                    1.7320508075688772935274463415059f
#define C_PI                        3.1415926535897932384626433832795f
#define C_E                         2.7182818284590452353602874713527f
#define C_2PI                       6.283185307179586476925286766559f

//@cmp.def.start
//component defines





    





    




    






    

    

    

    

    

    


    



    

    
















    

    

    

    





//@cmp.def.end


//-----------------------------------------------------------------------------------------                 
// generated using template: common_variables.template-------------------------------------
// true global variables





// const variables

//@cmp.var.start
// variables
         double _constant1__out = 1.0;
    double _iout_ia2__out;
        double _low_pass_filter1__out;
        double _low_pass_filter1__previous_filtered_value;    double _vin_va1__out;
    double _vout_va1__out;

                        double _ti_exp_adc__generic_1_adc_advanced_c_function__out;

         double _ti_exp_adc__generic_1_offset__out = 1.5;
         double _ti_exp_adc__generic_1_raw_offset__out = 0.0;
         double _ti_exp_constant17__out = 180.0;
         double _ti_exp_constant18__out = 0.5;

                        X_Int32 _ti_exp_gpio___hil_do1_gpio_di_advanced_c_function__out;

        double _ti_exp_rate_transition1_output__out;
        double _ti_exp_rate_transition2_output__out;
        double _ti_exp_rate_transition3_output__out;

                        double _ti_exp_sci_receive1_advanced_c_function__var1;

         double _ti_exp_sci_setup1_constant1__out = 1.0;
    float _sim_running__tmp;
double _product1__out;
    double _ti_exp_adc__generic_1_sum2__out;
                double _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__in;

                        double _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__out;
                    X_UnInt32 _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__phsdir;

                double _ti_exp_epwm__generic_1_d_to_cmpa_1_d_to_cmpa__in;

                        double _ti_exp_epwm__generic_1_d_to_cmpa_1_d_to_cmpa__out;

                double _ti_exp_epwm__generic_1_d_to_cmpa_2_d_to_cmpa__in;

                        double _ti_exp_epwm__generic_1_d_to_cmpa_2_d_to_cmpa__out;

                double _ti_exp_epwm__generic_1_d_to_cmpa_3_d_to_cmpa__in;

                        double _ti_exp_epwm__generic_1_d_to_cmpa_3_d_to_cmpa__out;

                double _ti_exp_epwm__generic_1_d_to_cmpa_4_d_to_cmpa__in;

                        double _ti_exp_epwm__generic_1_d_to_cmpa_4_d_to_cmpa__out;

                double _ti_exp_sci_send1_advanced_c_function__var1;
                double _ti_exp_sci_send1_advanced_c_function__var2;

    
                double _ti_exp_sci_setup1_advanced_c_function__outdata;

    
double _deg2rad2__out;double _ti_exp_adc__generic_1_12_bit_to_refv__out;                X_UnInt32 _ti_exp_epwm__generic_1_epwm_1_advanced_c_function__CMPA;

                        X_Int32 _ti_exp_epwm__generic_1_epwm_1_advanced_c_function__A;
                    X_Int32 _ti_exp_epwm__generic_1_epwm_1_advanced_c_function__B;

                X_UnInt32 _ti_exp_epwm__generic_1_epwm_2_advanced_c_function__CMPA;
                X_UnInt32 _ti_exp_epwm__generic_1_epwm_2_advanced_c_function__PHSDIR;
                X_UnInt32 _ti_exp_epwm__generic_1_epwm_2_advanced_c_function__TBPHS;

                        X_Int32 _ti_exp_epwm__generic_1_epwm_2_advanced_c_function__A;
                    X_Int32 _ti_exp_epwm__generic_1_epwm_2_advanced_c_function__B;

    double _ti_exp_adc__generic_1_sum1__out;
double _ti_exp_adc__generic_1_scaling__out;    double _ti_exp_sum19__out;
    double _ti_exp_pid_controller3__out;
    double _ti_exp_pid_controller3__pi_reg_out_int;
double _ti_exp_rad2deg__out;    double _ti_exp_limit3__out;
double _ti_exp_gain10__out;    double _ti_exp_sum20__out;
    double _ti_exp_epwm__generic_1_rel_angle3__out;
                double _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__in;

                        double _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__out;
                    X_UnInt32 _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__phsdir;

                double _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__in;

                        double _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__out;
                    X_UnInt32 _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__phsdir;

                X_UnInt32 _ti_exp_epwm__generic_1_epwm_4_advanced_c_function__CMPA;
                X_UnInt32 _ti_exp_epwm__generic_1_epwm_4_advanced_c_function__PHSDIR;
                X_UnInt32 _ti_exp_epwm__generic_1_epwm_4_advanced_c_function__TBPHS;

                        X_Int32 _ti_exp_epwm__generic_1_epwm_4_advanced_c_function__A;
                    X_Int32 _ti_exp_epwm__generic_1_epwm_4_advanced_c_function__B;

                X_UnInt32 _ti_exp_epwm__generic_1_epwm_3_advanced_c_function__CMPA;
                X_UnInt32 _ti_exp_epwm__generic_1_epwm_3_advanced_c_function__PHSDIR;
                X_UnInt32 _ti_exp_epwm__generic_1_epwm_3_advanced_c_function__TBPHS;

                        X_Int32 _ti_exp_epwm__generic_1_epwm_3_advanced_c_function__A;
                    X_Int32 _ti_exp_epwm__generic_1_epwm_3_advanced_c_function__B;

//@cmp.var.end

//@cmp.svar.start
// state variables
        double _low_pass_filter1__filtered_value;
        double _low_pass_filter1__previous_in;
    


    

            double _ti_exp_rate_transition1_output__state;
            double _ti_exp_rate_transition2_output__state;
            double _ti_exp_rate_transition3_output__state;
            double _ti_exp_sci_receive1_advanced_c_function__state_var[1];


    

            double _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__in_fmd;

            double _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__target_angle;

            X_Int32 _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__delay;


    


    


    


    


    


    


    


    


    

    double _ti_exp_pid_controller3__integrator_state;
        X_Int32 _ti_exp_pid_controller3__av_active;
    double _ti_exp_pid_controller3__filter_state;X_Int32 _ti_exp_pid_controller3__reset_state;            double _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__in_fmd;

            double _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__target_angle;

            X_Int32 _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__delay;


    

            double _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__in_fmd;

            double _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__target_angle;

            X_Int32 _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__delay;


    


    


    

//@cmp.svar.end

//
// Tunable parameters
//
static struct Tunable_params {
} __attribute__((__packed__)) tunable_params;

void *tunable_params_dev0_cpu0_ptr = &tunable_params;

// Dll function pointers
#if defined(_WIN64)
#else
    // Define handles for loading dlls
#endif







              
// generated using template: virtual_hil/custom_functions.template---------------------------------
void ReInit_user_sp_cpu0_dev0(){

#if DEBUG_MODE
    printf("\n\rReInitTimer");
#endif


    //@cmp.init.block.start
    
    
            

            _low_pass_filter1__filtered_value = 0.0 / (1 - 6.283185307179586 * 500.0 * 5e-05 );
        _low_pass_filter1__previous_in = 0x0;

    
    
        {
}

    
    
    
    
        {
}

                _ti_exp_rate_transition1_output__state =  0.0;

                _ti_exp_rate_transition2_output__state =  0.0;

                _ti_exp_rate_transition3_output__state =  0.0;

        {
     ;
}

    
    
    

      HIL_OutAO(0x4000, 0.0f);

    
    
        {
}

        {
}

        {
}

        {
}

        {
}

        {
}

    
        {
}

    
    
        {
}

        {
}

    
    
    
    
    
    
    
    
        _ti_exp_pid_controller3__integrator_state =  0.0;
    _ti_exp_pid_controller3__filter_state =  0.0;

    
    
    
    
    
    
        {
}

        {
}

        {
}

        {
}

    
    
    
    
    //@cmp.init.block.end
}


// Dll function pointers and dll reload function
#if defined(_WIN64)
    // Define method for reloading dll functions
    void ReloadDllFunctions_user_sp_cpu0_dev0(void) {
        // Load each library and setup function pointers
    }

    void FreeDllFunctions_user_sp_cpu0_dev0(void) {
    }

#else
    // Define method for reloading dll functions
    void ReloadDllFunctions_user_sp_cpu0_dev0(void) {
        // Load each library and setup function pointers
    }

    void FreeDllFunctions_user_sp_cpu0_dev0(void) {
    }
#endif

void load_fmi_libraries_user_sp_cpu0_dev0(void) {
    #if defined(_WIN64)
    #else
    #endif
}


void ReInit_sp_scope_user_sp_cpu0_dev0(){
    // initialise SP Scope buffer pointer
}              
// generated using template: virtual_hil/common_timer_counter_handler.template-------------------------

/*****************************************************************************************/
/**
* This function is the handler which performs processing for the timer counter.
* It is called from an interrupt context such that the amount of processing
* performed should be minimized.  It is called when the timer counter expires
* if interrupts are enabled.
*
*
* @param    None
*
* @return   None
*
* @note     None
*
*****************************************************************************************/

void TimerCounterHandler_0_user_sp_cpu0_dev0() {

#if DEBUG_MODE
    printf("\n\rTimerCounterHandler_0");
#endif

    //////////////////////////////////////////////////////////////////////////
    // Set tunable parameters
    //////////////////////////////////////////////////////////////////////////
             // Generated from the component: Constant1
            


             // Generated from the component: ti_exp.ADC (Generic)1.offset
            


             // Generated from the component: ti_exp.ADC (Generic)1.raw_offset
            


             // Generated from the component: ti_exp.Constant17
            


             // Generated from the component: ti_exp.Constant18
            


//////////////////////////////////////////////////////////////////////////
    // Output block
    //////////////////////////////////////////////////////////////////////////
    //@cmp.out.block.start
         // Generated from the component: Iout.Ia2
            _iout_ia2__out = (HIL_InFloat(0xc80000+0x1c));

         // Generated from the component: Low-Pass Filter1
                

        _low_pass_filter1__previous_filtered_value = _low_pass_filter1__filtered_value;
            _low_pass_filter1__filtered_value = _low_pass_filter1__previous_in * (6.283185307179586 * 500.0 * 5e-05) + _low_pass_filter1__previous_filtered_value * (1 - 6.283185307179586 * 500.0 * 5e-05 );
        _low_pass_filter1__out = _low_pass_filter1__filtered_value;


         // Generated from the component: Vin.Va1
            _vin_va1__out = (HIL_InFloat(0xc80000+0x13));

         // Generated from the component: Vout.Va1
            _vout_va1__out = (HIL_InFloat(0xc80000+0x14));

         // Generated from the component: ti_exp.ADC (Generic)1.ADC.advanced c function
        
    {
     ;
}

         // Generated from the component: ti_exp.GPIO - HIL DO1.GPIO DI.advanced c function
        
    {
     ;
}

         // Generated from the component: ti_exp.SCI Receive1.advanced c function
        
    {
     ;
}

         // Generated from the component: sim_running
                HIL_OutInt32(0xf00400, _constant1__out != 0x0);

         // Generated from the component: Pmeas
        

    HIL_OutAO(0x4000, (float)_low_pass_filter1__out);

         // Generated from the component: Product1
        _product1__out = (_iout_ia2__out * _vout_va1__out);

         // Generated from the component: ti_exp.ADC (Generic)1.Sum2
        _ti_exp_adc__generic_1_sum2__out = _ti_exp_adc__generic_1_adc_advanced_c_function__out-_ti_exp_adc__generic_1_raw_offset__out;    

         // Generated from the component: ti_exp.ePWM (Generic)1.deg_to_TBPHS 2.deg_to_TBPHS
                    _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__in = _ti_exp_constant17__out;

    {
    _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__in_fmd = fmod ( _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__in , 360 ) ; _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__target_angle = ( _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__in_fmd < 0 ? _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__in_fmd + 360 : _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__in_fmd ) ; if ( _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__target_angle < 180 )     {
        _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__phsdir = 1 ; _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__delay = 2 ;
}
 else     {
        _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__target_angle = 360 - _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__target_angle ; _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__phsdir = 0 ; _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__delay = - 2 ;
}
 _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__out = _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__target_angle / 180.0 * 1000 + _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__delay ;
}

         // Generated from the component: ti_exp.ePWM (Generic)1.D_to_CMPA 1.D_to_CMPA
                    _ti_exp_epwm__generic_1_d_to_cmpa_1_d_to_cmpa__in = _ti_exp_constant18__out;

    {
    _ti_exp_epwm__generic_1_d_to_cmpa_1_d_to_cmpa__out = _ti_exp_epwm__generic_1_d_to_cmpa_1_d_to_cmpa__in * 1000 ;
}

         // Generated from the component: ti_exp.ePWM (Generic)1.D_to_CMPA 2.D_to_CMPA
                    _ti_exp_epwm__generic_1_d_to_cmpa_2_d_to_cmpa__in = _ti_exp_constant18__out;

    {
    _ti_exp_epwm__generic_1_d_to_cmpa_2_d_to_cmpa__out = _ti_exp_epwm__generic_1_d_to_cmpa_2_d_to_cmpa__in * 1000 ;
}

         // Generated from the component: ti_exp.ePWM (Generic)1.D_to_CMPA 3.D_to_CMPA
                    _ti_exp_epwm__generic_1_d_to_cmpa_3_d_to_cmpa__in = _ti_exp_constant18__out;

    {
    _ti_exp_epwm__generic_1_d_to_cmpa_3_d_to_cmpa__out = _ti_exp_epwm__generic_1_d_to_cmpa_3_d_to_cmpa__in * 1000 ;
}

         // Generated from the component: ti_exp.ePWM (Generic)1.D_to_CMPA 4.D_to_CMPA
                    _ti_exp_epwm__generic_1_d_to_cmpa_4_d_to_cmpa__in = _ti_exp_constant18__out;

    {
    _ti_exp_epwm__generic_1_d_to_cmpa_4_d_to_cmpa__out = _ti_exp_epwm__generic_1_d_to_cmpa_4_d_to_cmpa__in * 1000 ;
}

         // Generated from the component: ti_exp.Rate Transition1.Input
        _ti_exp_rate_transition1_output__state = _ti_exp_sci_receive1_advanced_c_function__var1;
         // Generated from the component: deg2rad2
                    _deg2rad2__out = 0.001 * _product1__out;

         // Generated from the component: ti_exp.ADC (Generic)1.12_bit_to_refV
                    _ti_exp_adc__generic_1_12_bit_to_refv__out = 0.0007326007326007326 * _ti_exp_adc__generic_1_sum2__out;

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 1.advanced c function
                    _ti_exp_epwm__generic_1_epwm_1_advanced_c_function__CMPA = _ti_exp_epwm__generic_1_d_to_cmpa_1_d_to_cmpa__out;

    {
     ;
}

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 2.advanced c function
                    _ti_exp_epwm__generic_1_epwm_2_advanced_c_function__CMPA = _ti_exp_epwm__generic_1_d_to_cmpa_2_d_to_cmpa__out;
            _ti_exp_epwm__generic_1_epwm_2_advanced_c_function__PHSDIR = _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__phsdir;
            _ti_exp_epwm__generic_1_epwm_2_advanced_c_function__TBPHS = _ti_exp_epwm__generic_1_deg_to_tbphs_2_deg_to_tbphs__out;

    {
     ;
}

         // Generated from the component: ti_exp.ADC (Generic)1.Sum1
        _ti_exp_adc__generic_1_sum1__out = _ti_exp_adc__generic_1_12_bit_to_refv__out-_ti_exp_adc__generic_1_offset__out;    

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 1.Termination1
        

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 1.Termination2
        

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 2.Termination1
        

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 2.Termination2
        

         // Generated from the component: ti_exp.ADC (Generic)1.scaling
                    _ti_exp_adc__generic_1_scaling__out = 100.0 * _ti_exp_adc__generic_1_sum1__out;

         // Generated from the component: ti_exp.Rate Transition2.Input
        _ti_exp_rate_transition2_output__state = _ti_exp_adc__generic_1_scaling__out;
         // Generated from the component: ti_exp.Sum19
        _ti_exp_sum19__out = _ti_exp_sci_receive1_advanced_c_function__var1-_ti_exp_adc__generic_1_scaling__out;    

         // Generated from the component: ti_exp.PID controller3
        


        _ti_exp_pid_controller3__pi_reg_out_int = _ti_exp_pid_controller3__integrator_state + 0.001404962946208145 * _ti_exp_sum19__out;


        if (_ti_exp_pid_controller3__pi_reg_out_int < -1.5707963267948966)
            _ti_exp_pid_controller3__av_active = -1;
        else if (_ti_exp_pid_controller3__pi_reg_out_int > 1.5707963267948966)
            _ti_exp_pid_controller3__av_active = 1;
        else
            _ti_exp_pid_controller3__av_active = 0;

        _ti_exp_pid_controller3__out = MIN(MAX(_ti_exp_pid_controller3__pi_reg_out_int, -1.5707963267948966), 1.5707963267948966);

         // Generated from the component: ti_exp.rad2deg
                    _ti_exp_rad2deg__out = 57.29577951308232 * _ti_exp_pid_controller3__out;

         // Generated from the component: ti_exp.Limit3
              _ti_exp_limit3__out = MIN(MAX(_ti_exp_rad2deg__out, -90.0), 90.0);

         // Generated from the component: ti_exp.Gain10
                    _ti_exp_gain10__out = -1.0 * _ti_exp_limit3__out;

         // Generated from the component: ti_exp.Rate Transition3.Input
        _ti_exp_rate_transition3_output__state = _ti_exp_limit3__out;
         // Generated from the component: ti_exp.Sum20
        _ti_exp_sum20__out = _ti_exp_constant17__out+_ti_exp_gain10__out;    

         // Generated from the component: ti_exp.ePWM (Generic)1.rel_angle3
        _ti_exp_epwm__generic_1_rel_angle3__out =  - _ti_exp_constant17__out+_ti_exp_gain10__out;    

         // Generated from the component: ti_exp.ePWM (Generic)1.deg_to_TBPHS 4.deg_to_TBPHS
                    _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__in = _ti_exp_sum20__out;

    {
    _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__in_fmd = fmod ( _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__in , 360 ) ; _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__target_angle = ( _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__in_fmd < 0 ? _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__in_fmd + 360 : _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__in_fmd ) ; if ( _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__target_angle < 180 )     {
        _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__phsdir = 1 ; _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__delay = 2 ;
}
 else     {
        _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__target_angle = 360 - _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__target_angle ; _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__phsdir = 0 ; _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__delay = - 2 ;
}
 _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__out = _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__target_angle / 180.0 * 1000 + _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__delay ;
}

         // Generated from the component: ti_exp.ePWM (Generic)1.deg_to_TBPHS 3.deg_to_TBPHS
                    _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__in = _ti_exp_epwm__generic_1_rel_angle3__out;

    {
    _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__in_fmd = fmod ( _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__in , 360 ) ; _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__target_angle = ( _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__in_fmd < 0 ? _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__in_fmd + 360 : _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__in_fmd ) ; if ( _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__target_angle < 180 )     {
        _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__phsdir = 1 ; _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__delay = 2 ;
}
 else     {
        _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__target_angle = 360 - _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__target_angle ; _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__phsdir = 0 ; _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__delay = - 2 ;
}
 _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__out = _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__target_angle / 180.0 * 1000 + _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__delay ;
}

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 4.advanced c function
                    _ti_exp_epwm__generic_1_epwm_4_advanced_c_function__CMPA = _ti_exp_epwm__generic_1_d_to_cmpa_4_d_to_cmpa__out;
            _ti_exp_epwm__generic_1_epwm_4_advanced_c_function__PHSDIR = _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__phsdir;
            _ti_exp_epwm__generic_1_epwm_4_advanced_c_function__TBPHS = _ti_exp_epwm__generic_1_deg_to_tbphs_4_deg_to_tbphs__out;

    {
     ;
}

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 3.advanced c function
                    _ti_exp_epwm__generic_1_epwm_3_advanced_c_function__CMPA = _ti_exp_epwm__generic_1_d_to_cmpa_3_d_to_cmpa__out;
            _ti_exp_epwm__generic_1_epwm_3_advanced_c_function__PHSDIR = _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__phsdir;
            _ti_exp_epwm__generic_1_epwm_3_advanced_c_function__TBPHS = _ti_exp_epwm__generic_1_deg_to_tbphs_3_deg_to_tbphs__out;

    {
     ;
}

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 4.Termination1
        

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 4.Termination2
        

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 3.Termination1
        

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 3.Termination2
        

//@cmp.out.block.end


    //////////////////////////////////////////////////////////////////////////
    // Update block
    //////////////////////////////////////////////////////////////////////////
    //@cmp.update.block.start
         // Generated from the component: Low-Pass Filter1
                

        _low_pass_filter1__previous_in = _deg2rad2__out;

         // Generated from the component: ti_exp.ADC (Generic)1.ADC.advanced c function
        
    {
}

         // Generated from the component: ti_exp.GPIO - HIL DO1.GPIO DI.advanced c function
        
    {
}

         // Generated from the component: ti_exp.SCI Receive1.advanced c function
        
    {
}

         // Generated from the component: ti_exp.ePWM (Generic)1.deg_to_TBPHS 2.deg_to_TBPHS
        
    {
}

         // Generated from the component: ti_exp.ePWM (Generic)1.D_to_CMPA 1.D_to_CMPA
        
    {
}

         // Generated from the component: ti_exp.ePWM (Generic)1.D_to_CMPA 2.D_to_CMPA
        
    {
}

         // Generated from the component: ti_exp.ePWM (Generic)1.D_to_CMPA 3.D_to_CMPA
        
    {
}

         // Generated from the component: ti_exp.ePWM (Generic)1.D_to_CMPA 4.D_to_CMPA
        
    {
}

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 1.advanced c function
        
    {
}

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 2.advanced c function
        
    {
}

         // Generated from the component: ti_exp.PID controller3
        if (((_ti_exp_gpio___hil_do1_gpio_di_advanced_c_function__out > 0.0) && (_ti_exp_pid_controller3__reset_state <= 0)) || ((_ti_exp_gpio___hil_do1_gpio_di_advanced_c_function__out <= 0.0) && (_ti_exp_pid_controller3__reset_state == 1))) {_ti_exp_pid_controller3__integrator_state = 0.0;
            _ti_exp_pid_controller3__filter_state = 0.0;

            }

                if (!_ti_exp_pid_controller3__av_active || ((_ti_exp_pid_controller3__av_active < 0 && _ti_exp_sum19__out > 0 ) || (_ti_exp_pid_controller3__av_active > 0 && _ti_exp_sum19__out < 0 ))) {
                    _ti_exp_pid_controller3__integrator_state += 30.90918481657919 * _ti_exp_sum19__out * 5e-05;
                }


        if (_ti_exp_gpio___hil_do1_gpio_di_advanced_c_function__out > 0)
            _ti_exp_pid_controller3__reset_state = 1.0;
        else if (_ti_exp_gpio___hil_do1_gpio_di_advanced_c_function__out < 0)
            _ti_exp_pid_controller3__reset_state = -1.0;
        else
            _ti_exp_pid_controller3__reset_state = 0.0;

         // Generated from the component: ti_exp.ePWM (Generic)1.deg_to_TBPHS 4.deg_to_TBPHS
        
    {
}

         // Generated from the component: ti_exp.ePWM (Generic)1.deg_to_TBPHS 3.deg_to_TBPHS
        
    {
}

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 4.advanced c function
        
    {
}

         // Generated from the component: ti_exp.ePWM (Generic)1.ePWM 3.advanced c function
        
    {
}

    //@cmp.update.block.end
}
void TimerCounterHandler_1_user_sp_cpu0_dev0() {

#if DEBUG_MODE
    printf("\n\rTimerCounterHandler_1");
#endif

    //////////////////////////////////////////////////////////////////////////
    // Set tunable parameters
    //////////////////////////////////////////////////////////////////////////
             // Generated from the component: ti_exp.SCI Setup1.Constant1
            


//////////////////////////////////////////////////////////////////////////
    // Output block
    //////////////////////////////////////////////////////////////////////////
    //@cmp.out.block.start
         // Generated from the component: ti_exp.Rate Transition1.Output
                    _ti_exp_rate_transition1_output__out = _ti_exp_rate_transition1_output__state;

         // Generated from the component: ti_exp.Rate Transition2.Output
                    _ti_exp_rate_transition2_output__out = _ti_exp_rate_transition2_output__state;

         // Generated from the component: ti_exp.Rate Transition3.Output
                    _ti_exp_rate_transition3_output__out = _ti_exp_rate_transition3_output__state;

         // Generated from the component: ti_exp.SCI Send1.advanced c function
                    _ti_exp_sci_send1_advanced_c_function__var1 = _ti_exp_rate_transition2_output__out;
            _ti_exp_sci_send1_advanced_c_function__var2 = _ti_exp_rate_transition3_output__out;

    {
     ;
}

         // Generated from the component: ti_exp.SCI Setup1.advanced c function
                    _ti_exp_sci_setup1_advanced_c_function__outdata = _ti_exp_sci_setup1_constant1__out;

    {
     ;
}

//@cmp.out.block.end


    //////////////////////////////////////////////////////////////////////////
    // Update block
    //////////////////////////////////////////////////////////////////////////
    //@cmp.update.block.start
         // Generated from the component: ti_exp.SCI Send1.advanced c function
        
    {
}

         // Generated from the component: ti_exp.SCI Setup1.advanced c function
        
    {
}

    //@cmp.update.block.end
}
// ----------------------------------------------------------------------------------------
  //-----------------------------------------------------------------------------------------